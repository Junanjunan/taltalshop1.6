# 0.3 
    python version 3 이어야 함 - 설치시 Add Python X.X to PATH 반드시 체크

# ?

    1. pipenv - https://pipenv.pypa.io/en/latest/install/#installing-pipenv
   ******** pip install --user pipenv ********
    설치후 확인 콘솔에 pipenv 치면 됨
        --> 이때 오류 발생할때 팁
        혹시나 윈도우 환경에서 콘솔에서 pipenv 쳤을 때 진행 안되시는 분은
    pip list 에서 virtualenv 이 설치되어있는지 확인 해주시고
    pip uninstall virtualenv
    pip uninstall pipenv
    pip install pipenv
    순서로 진행해주시면 정상적으로 작동되는거 확인 가능하실 겁니다 ^ㅡ^

    2. pipenv 사용해서 environment(독립된 개발환경) 만들기 - 버블 생성
    방법: python 버전이 3.9 이므로
    콘솔창에 ******** pipenv --three ********  입력
    Pipfile 생성됨

    3. 그 개발환경(버블) 안으로 접근 : pipenv shell

    4. 버블 안으로 온 후 Django 설치: ******** pipenv install Django==3.1.4 ********(최신 3.1.5)    (강의에서 2.2.5 버전 설치... 나중에 오류 나면 참고)
    (https://www.djangoproject.com/download/) 왼쪽 공식 사이트에는 pipenv install Django==3.1.4 로 나와있는데,
    우리는 개발환경을 사용할 것이니 pipenv로 대체

    5. 확인하기 : django-admin 입력

    6. django-admin startproject config 하면 config 파일과 그 안에 또 config 파일이 생기는데
    바깥쪽 config파일 이름을 아무거나 바꾸고 그 안에 config와 mange.py를 바깥으로 꺼낸다

    7. python manage.py runserver : 터미널에서 실행해서 127.0.0.1 8000 들어가면 설치 완료되었다고 나옴

    8. 로컬호스트 뜨고 그 주소 뒤에 /admin 으로 접속하면 Django administration 페이지가 뜨는데, 만약에 오류 뜨면 9번 실행

    9. 서버 꺼준 후(ctrl+c) python manage.py migrate 해주고 다시  python manage.py runserver:

    10. 유저 생성 : python manage.py createsuperuser

    11. python manage.py makemigrations : 장고가 우리의 models를 확인하고 migration 파일을 생성 - 변경된 데이터가 없으면 no changes detected 

    12. python manage.py migrate : 데이터베이스가 정보를 갖게 됨 (처음 실행시 데이터 유형을 데이터베이스에게 알려주게 됨..?)
        11. 12는 세트인 듯


# 1.3
    gitignore python
    .gitignore 파일 만들고
    gitignore python 검색해서 사이트 들어가서(https://github.com/github/gitignore/blob/master/Python.gitignore) 복사해서 .gitignore 파일에 붙여넣기
    (Mac Os의 경우 .DS_Store 를 직접 추가해준다)

# 2.0 
    Linter 등 이것 저것 설치하라고 뜬다면
    extensions에 가서 python 설치

# 2.1
    python pep : 파이썬의 일반적 양식에 대한 설명(style guide), 구글 검색에 python pep 검색
    Linter : 빨간 밑줄 등 오류 잡아주는 프로그램
    .vscode(폴더): extensions 적용 하는 방법 설명 해주는 강의 있음 찾아보기(.vscode/settings.json)

# 2.2 
    __init__.py : 장고에서 폴더를 만들면 기본적으로 __init__.py 를 만들어줘야 함 (일종의 import)
    config.settings.py에서 TIME_ZONE 변경

# 2.5 
    application: It is a group of functions
        ex: room application : room을 생성, 검색, 삭제, 수정, room 페이지 보여주기 등의 function 들의 group

# 2.6 
    making application : ******** django-admin startapp 복수형 폴더이름 ********
    messages 폴더를 안만드는 이유는 이미 장고에 있기 때문

# 2.7 
    url 바꿔보기
    config/urls.py -> urlpatterns의 "admin"을 "kimchi"로 바꿔보자
    django-admin startapp 복수형 폴더이름으로 생기는 내부의 파일명들은 절대 변경 X -> Django가 지켜보도록 세팅된 파일명
    - models.py: data -> data를 변경하는 곳, models가 database가 어떻게에 대해서 설명해줘야 하는 곳
    - apps.py: just configuration file -> 별로 신경은 안쓸거라 함.
    - views.py: 사용자들이 보게될 부분(frontend)
    - config/urls.py: 웹사이트의 url 컨트롤 --> 모든 url들이 여기에 들어가야 되는데, 너무 커지는 건 통제가 힘드니 각 application마다 urls.py를 만들어서 나누어서 관리 -> 어쨌든 config/urls.py에 합쳐줘야 함..?

# 3.0 
    models extend (https://docs.djangoproject.com/en/3.1/topics/auth/customizing/)
        1) users extend
            - settings.py 에 INSTALLED_APPS에 "폴더명.apps.클래스명" 추가 ("users.apps.UsersConfig")
            - ******** settings.py 에 AUTH_USER_MODEL = '폴더명(users).클래스명(User) ********           
            - ******** database 한번 삭제하고 migrate 해줘야 정상 작동 ********
            - ******** admin에 users 없어져있음 (default admin을 변경했기 때문) -> admin.py에 users 추가 ********
# 3.1           admin패널에 나타나는 이름: 폴더명(앞은 자동 대문자) -폴더명 users의 models 안의 클래스명을 UserKKK로 했는데 admin 패널에 Users로 나오는 것으로 보아서

# 3.2
    models의 field 값에 default 넣어주는 이유 
        - database의 특성: 한번에 만들어지는 data가 아니라 추가 되는 데이터일 경우, null=True 또는 default 값을 설정 해주어야 한다. - database 지우고 migrations도 다 지우고 다시 만들때는 null=True 또는 default 값 설정 안해줘도 됨
    ImageField -> pipenv install pillow (이미지 처리하는 파이썬 library)


# 3.4
    admin.py에 model이 나타나게 하는 방법 2가지 (강의 #3.4)
    1) @admin.register(models.User)
       class CustomUserAdmin(admin.modelAdmin) --> 앞으로 계속 쓰게 될 방법: decorator
    2) admin.site.register(models.User, CustomUserAdmin)

# 3.5
    admin - 기본은 admin.modelAdmin인데
    UserAdmin으로 좀더 세분화해서 사용(from django.contrib.auth.admin import UserAdmin)

# 4.0
    # core
    1) class Meta:
          abstract = True :   
           -> core/models.py가 데이터베이스에 저장되지 않도록 함 (abstract Model은 데이타베이스에 나타나지 않도록 해주는 Model 임)
            왜냐면 core/models.py 를 확장해서 사용한 다른 Model(ex. rooms/models.py, reviews/models.py)이 데이터베이스에 저장되도록 해야 함
           --> 그래서 users/models.py 에 AbstractUser도 데이터베이스에 등록되지 않는다.(AbstractUser도 abstract Model 이기 때문에)
    2) auto_now, auto_now_add
        DateTimeField에 쓰이는 기능
        auto_now=True -> 필드가 Model을 save할 때 date랑 time을 기록? 보여줌? --> updated에 쓰기 
        auto_now_add=True -> 필드가 Model을 생성할 때마다 업데이트 해서 기록? 보여줌? --> created에 쓰기

# 4.1
    - pipenv install django-countries & INSTALLED_APPS에 "django_countries" 설치 & from django_countries.fields import CountryField

# 4.2 
    ForeignKey
        - many-to-one relationship
        - 하나가 여러개를 가질 수 있을 때, 여러개에 속하는 곳을 models.ForeignKey가 있는 소스로 둔다
            ex. User는 여러개의 Room을 가질수 있다. 따라서 rooms/models.Room에 models.ForeignKey 작성


# 4.2?3?
    class 안의 def 의 self 
        class Rooms(~):
            name = ~~
            def __str__(self):
            return self.name
            -> self는 def가 속한 class(Rooms)를 가르킨다

# 4.3
    many-to-many relationship
    rooms/models.py에
        class AbstractItem(core_models, TimeStampedModel):
            class Meta:
                abstract = True   쓰는 이유
    -> Amenity, Facility 등을 사용하기 위해서
    -> AbstractItem이 데이터베이스에 기록되면 안되고
    -> AbstractItem을 통해서 만들어진 RoomType, Amenity, Facility등이 기록될것이기 때문에 AbstractItem은 abstract=True 해줌

# 4.4
    1) on_delete: models.CASCADE -> Django Documents에서 ForeignKey/Model field reference 검색해서 보면 됨
        CASCADE, SET_NULL, SET_DEFAULT, SET(), DO_NOTHING 등 볼 수 있음
    2) SET_NULL : ForeignKey로 소스와 타겟이 연결되었다고 할 때, 타겟(부모)이 삭제되어도 소스가 삭제되지 않길 원할 때 

# 4.5 
    Meta Class
    모델 내의 모든 class들 안에 있는 class
    class 내에서 class Meta: 해주고 여러가지 설정 가능 -> djangoproject documents에서 확인
    1) verbose_name_plural: 복수형 설정 - if this isn't given, Django will use verbose_name + "s"
    2) verbose_name: If this isn't given, Django will use a munged version of the class name: ex) Camel Case -> camel case

    rooms/models.py 안의 class Photo와 class Rooms와의 관계
    사진이 Photo로 링크 -> Photo가 Room으로 링크(by ForeignKey)

    Photo안에 class Room을 사용할 것인데, 파이썬 코딩은 위에서 아래로 수직방향으로 읽기 때문에
    class Photo를 class Room 아래에 설정해주어야 한다.
    ---> 이 번거로움을 막기 위해서 ForeignKey로 연결해줄 class 명에 str화를 해준다.
    room = models.ForeignKey(Room, on_delete=models.CASCADE) -> 반드시 class Photo가 class Room보다 아래 생성
    room = models.ForeignKey("Room", on_delete=models.CASCADE) -> 이렇게 str화 해주면 상관 없음

    host = models.ForeignKey(user_models.User ...)을 "user_models.User"로 하면 오류 발생
        ->"users.User"로 바꿔줘야 함 (users 폴더 안에 User 의미)

    오류 발생 ex
    ERRORS:
        rooms.Photo.room: (models.E006) The field 'room' clashes with the field 'room' from model 'core.timestampedmodel'.
        -> TimeStampedModel을 abstract화 안해줘서 생기는 문제
        core/models.py/TimeStampedModel에
        class Meta:
            abstract = True 꼭 잊지말자!

# 6.0 
    search_fields = ("=city", "^host__username") : Admin 의 class 안에 들어가는 기능
    여기서 city는 같은 파일에 있는 model의 한 요소, 
    host는 ForeignKey로 연결되어 있는 model의 한 요소 -> 언더 바 2개로 연결 (__) -> ^host__username
    (https://docs.djangoproject.com/en/3.1/ref/contrib/admin/)
    
# 6.1
    many-to-many -> filter_horizontal: (강의 #6.1)
    fieldsets -> 'classes':('collapse') -> fieldsets를 접을 수 있게 해줌

# 6.2
    ModelAdmin (강의 #6.2) (class RoomAdmin(admin.ModelAdmin))
        1) ordering = ('', '', ..)
        2) admin function --> 두가지 인자 받음 : self, obj --> self는 admin의 class 자신, obj는 admin과 연결된 models의 class
            rooms/admin.py/class RoomAdmin
                def count_amenities(self, obj):
                return obj.room_type
            -> self: class RoomAdmin , obj: rooms/models.py/class Room 
        3) short_description: count_amenities.short_description = "~~"  -> admin 패널에서 보여지는 값을 변경해줌

# 7.0 ~ 7.1
    * 터미널 경로 지정: cd + 경로 (복사붙여넣기 하면됨)

    object(ForeignKey, ManyTomManyField로 연결된 것)에 어떻게 접근을 하고, 어떤 방식으로 수행되는지 이해하기
        Managers & QuerySets 에 대한 이해
            
            ** 콘솔로 Django 작동시키기 **
                해당파일로 접근(vscode에서는 해당 파일 열어주고 console 실행하면 됨)
                
                -> pipenv shell (버블 활성화)
                -> python manage.py shell (Django configuration(설정)과 models를 사용해서 프로젝트와 소통하기 위해)
                -> from users.models import User (User에 접근)
                
                    콘솔에 아래 왼쪽과 같이 입력시 오른쪽 출력
                        User : <class 'users.models.User'>
                        vars(User)
                        dir(USer)
                            vars and dir in python
                            vars: vars([object]) -> Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.
                                -> 강의 표현: returns the __dict__ dictionary or the representation in a list of class
                            dir: dir([object]) -> Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.
                                -> 강의 표현: returns the list of names inside of the class

                        User.objects: <django.contrib.auth.models.UserManager object at 0x000001ACC1ED74C0>
                            -> Manager 확인 가능(UserManager)
                                -> Manager가 파이썬을 이용해서 databse로 부터 elements를 가져오게 해줌 (sql을 쓰지 않고 python으로 -> 이게 장고의 큰 이점)
                        
                        User.objects.all(): <QuerySet [<User: taltal>]>
                            -> 모든 user를 QuerySet으로 준다
                            ** QuerySet -> database로부터 온 장고 objects이다.(내부에 많은 것을 내포한 리스트)
                            ex) User.objects.all().filter(superhost=False): <QuerySet [<User: taltal>]>
                                User.objects.all().filter(superhost=True): <QuerySet []>
                        
                                ************* djangoproject.documents에서 QuerySet API 살펴보기 *************

                        tal = User.objects.get(username="taltal") -> username으로 user 가져오기

                        vars(tal): {'_state': <django.db.models.base.ModelState object at 0x000001ACC29972B0>, 'id': 1, 'password': 'pbkdf2_sha256$216000$wCNz4JgYhuH0$htFxMMVIT2j+FIOKqGFJJcVGZYTNB0aynLwm9IrwsvI=', 'last_login': datetime.datetime(2021, 2, 2, 10, 40, 44, tzinfo=<UTC>), 'is_superuser': True, 'username': 'taltal', 'first_name': '', 'last_name': '', 'email': '', 'is_staff': True, 'is_active': True, 'date_joined': datetime.datetime(2021, 2, 2, 2, 7, 26, tzinfo=<UTC>), 'avatar': '', 'gender': '', 'bio': '', 'birthdate': None, 'language': '', 'currency': '', 'superhost': False}
                            -> 여러가지 값 얻는데 특히, <<<'id'>>> 값도 있다. 대부분 models에서 설정해준 key, value 가 있는 듯
                        
                        dir(tal): ['CURRENCY_CHOICES', 'CURRENCY_USD', 'DoesNotExist', 'EMAIL_FIELD', 'GENDER_CHOICES', 'GENDER_FEMALE', 'GENDER_MALE', 'LANGUAGE_CHOICES', 'LANGUAGE_ENGLISH', 'LANGUAGE_KOREAN', 'Meta', 'MultipleObjectsReturned', 'REQUIRED_FIELDS', 'USERNAME_FIELD', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_field_name_clashes', '_check_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_insert', '_do_update', '_get_FIELD_display', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_get_unique_checks', '_legacy_get_session_auth_hash', '_meta', '_password', '_perform_date_checks', '_perform_unique_checks', '_save_parents', '_save_table', '_set_pk_val', '_state', 'avatar', 'bio', 'birthdate', 'check', 'check_password', 'clean', 
                                    'clean_fields', 'conversation_set', 'currency', 'date_error_message', 'date_joined', 'delete', 'email', 'email_user', 'first_name', 'from_db', 'full_clean', 'gender', 'get_all_permissions', 'get_currency_display', 'get_deferred_fields', 'get_email_field_name', 'get_full_name', 'get_gender_display', 'get_group_permissions', 'get_language_display', 'get_next_by_date_joined', 'get_previous_by_date_joined', 'get_session_auth_hash', 'get_short_name', 'get_user_permissions', 'get_username', 'groups', 'has_module_perms', 'has_perm', 'has_perms', 'has_usable_password', 'id', 'is_active', 'is_anonymous', 'is_authenticated', 'is_staff', 'is_superuser', 'language', 'last_login', 'last_name', 'list_set', 'logentry_set', 'message_set', 'natural_key', 'normalize_username', 'objects', 'password', 'pk', 'prepare_database_save', 'refresh_from_db', 'reservation_set', 'review_set', 'room_set', 'save', 'save_base', 'serializable_value', 'set_password', 'set_unusable_password', 'superhost', 'unique_error_message', 'user_permissions', 'username', 'username_validator', 'validate_unique']
                            -> 여러 값들 중 <<<_set>>> 값이 있음: room_set, review_set, reservation_set 등, ForeignKey로 User에 연결된 Models의 'name of the model'_set 가 있음
                        
                        _set:
                            *** ForeginKey를 만들면, ForeginKey의 타겟이 되는 것(여기서는 User)에는 타겟과 ForeginKey로 연결된 것의 'name of the model'_set 이 생김
                                -> 'name of the model'_set : elements(타겟)가 ForeginKey에 접근할 수 있는 방법
                                    ex) tal.room_set.all(): <QuerySet [<Room: Jun's House>]>

                                -> """related_name"""을 통해 접근 방법을 room_set이 아니라 다른 식으로 바꿀수 있다. (room_set -> rooms 추천)
                                    -> ex) host = models.ForeginKey("users.User", related_name="rooms", on_delete=models.CASCADE)
                                                -> 호출할 때 tal.room_set.all() 하던 것을 tal.rooms.all()로 변경
                                    model명 + 복수형으로 바꾸는 이유: (아마) ManyTomManyField 등과 함께 쓸때 naming 때문에 헷갈리지 않게 하기 위해?

                        from rooms.models import Room
                        room = Room.objects.get(id=1) (id 대신 pk 도 가능)
                        room: <Room: Jun's House>
                        room.review_set: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x0000020EF6193D90>
                        room.review_set.all(): <QuerySet []>

                        ex) startswith filter
                        startswith = User.objects.filter(username__startswith="ta")
                        startswith: <QuerySet [<User: taltal>]>

# 7.2
    ManyToMany
    Amenity에서, Amenity를 쓰고 있는 Room 가져오기
        from rooms.models import Amenity
        Amenity.objects.all(): <QuerySet [<Amenity: alarm>, <Amenity: phone>]>
        a = Amenity.objects.get(id=1)
        a.room_set: <django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x0000020EF61A5D00>
        a.room_set.all(): <QuerySet [<Room: Jun's House>]>
            -> 얘도 편의를 위해서 related_name = "rooms"로 변경해주자

# 7.3 
    class Room에 photo와 관련된 것이 없지만
    class Photo에 room에 연결한 ForeginKey가 있기 때문에
    Roomadmin에서 Room을 photo와 관련된 것을 가진것 처럼 쓸 수 있다.

    @admin.register(models.Room)
    class RoomAdmin(admin.ModelAdmin):
        def count_photos(self, obj):
        return obj.photos.count()
           --> photos는 원래는 photo_set (return obj.photo_set.count()) 였는데 related_name으로 photos로 변경된 것임을 기억하자

# 8.0
    models.py에서 function을 만들어서, admin에서 사용할 수 있다. -> 여러 곳에서 사용하기 위해서(홈페이지에도 보여주고) admin이 아니라 models.py 에서 만들어서 admin.py에서 불러서 사용

# 8.2 
    join method (by python): ", ".join(list): ""안의 것을 기준으로 list 등의 elements을 나눠서 표현  tuple 등도 가능한지는 해봐야 할 듯 

# 8.3
    MEDIA_ROOT : Django에게 우리가 업로드한 파일들을 어디에 써야할지 알려준다
        1) config/settings.py에 경로지정 (저장)
            MEDIA_ROOT 사용
            * import os 를 해주고, settings.py에 있는 BASE_DIR와 os.path.join 을 이용해서 경로를 만들어준다
            os.path.join(BASE_DIR, "upload")를 MEDIA_ROOT에 넣어줌 : BASE_DIR 와 "upload"를 합쳐서 경로를 만들어줌
            MEDIA_ROOT = os.path.join(BASE_DIR, "uploads") -> 파일 업로드하면 uploads 폴더 생기고 그 안에 파일 첨부됨
            (.gitignore 에 uploads/ 등록)
        
           *) ImageField : ImageField는 FileField에서 온 것임 (ImageField는 FileField 중 Image만을 위한 것임) (URL) 지정
            이 필드 안에 upload_to""로 uploads 폴더 안의 어떤 폴더에다 photo를 업로드 할 것인지 정해줄 수 있다.

            MEDIA_URL: MEDIA_URL은 MEDIA_ROOT에서 온 MEDIA를 다룬다.

            MEDIA_ROOT: 어디에 저장할지
            MEDIA_URL: 어떤 url에서 불러올지
                MEDIA_URL = "/media/"       # / 없이 시작하면 절대경로, / 붙여서 시작하면 상대경로

        (config/urls.py)
            from django.contrib import admin
            from django.urls import path
            from django.conf import settings
            from django.conf.urls.static import static

            urlpatterns = [
                path('admin/', admin.site.urls),
            ]

            if settings.DEBUG:
                urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)        # static url을(settings.MEDIA_URL) 폴더(document_root)에 연결해준 것임

        위와 같이 해주면, admin 창에서 image 폴더명을 클릭했을 때 볼 수가 있고, 또한 get_thumbnail을 통해 thumbnail을 볼 수 있다.
        
        

# 8.5
    Photo Admin
    Photo Admin에서 get_thumbnail(self,obj):에서
    print(dir(obj.file))을 통해서 이용 가능한 많은 것을 얻을 수 있다.(ex: url, path, height...)
    사진의 이미지를 나타내기 위해서 아래와 같이 한다.
        def get_thumbnail(self, obj):
            return f'< img src = "{obj.file.url}" / >'
    그런데 보안문제 때문에 이런 html 구문을 쓰기 위해서는 기능을 호출해야 한다.  : from django.utils.html import mark_safe
    그리고 mark_safe()를 해주어야 함
        def get_thumbnail(self, obj):
                return mark_safe(f'<img src="{obj.file.url}" width="50px" />')

# 8.6

    raw_id_fields : foreign key or many-tomany field 를 더 나은 방법으로 찾게 해준다 -> 항목이 많을때, 추가 창을 띠워서 볼 수 있게 해줌(user가 많아질때 유용)

    InlineModelAdmin : admin 안에 또 다른 admin을 넣는 방법 (ex- RoomAdmin 안에 PhotoAdmin 넣어서 Room에서 사진 첨부하기)
        ex) rooms/admin.py에서 아래와 같이 해주면 Inlines를 통해 RoomAdmin안에 PhotoAdmin 생김

            class PhotoInline(admin.TabularInline): 
                model = models.Photo

            @admin.register(models.Room)
            class RoomAdmin(admin.ModelAdmin):
                inlines = (PhotoInline,)

        응용: TabularInline 말고 StackedInline도 있음

# 8.7
    save() and save_model()
    save() method : model을 위한 save 기능, Django의 모든 model들은 save() method를 가지고 있음 
        def save(self, *args, **kwargs):
            super().save(*args, **kwargs)
    save_model() method: admin을 위한 save 기능
        def save_model(self, request, obj, form, change):
            super().save_model(request, obj, form, change)
    save() method or save_model() method를 이용해서 저장시 조작을 할것임(intercept로 표현)(ex- seoul 저장시 Seoul로 자동 저장)



# 9.0
    command 만들기
        1) 해당 application(폴더) 안에 management 폴더 생성 -> __init__.py  생성 / commands 폴더 생성 -> commands 안에도 __init__.py 생성
        2) commands 폴더 안에 실행시키려는 파일 만들기 (ex. loveyou.py)
        3) 목적: python manage.py loveyou --times 50
            -> rooms(즉, application)/management/commands/loveyou.py 를 만들고, 실행하는 것은
                python manage.py loveyou 로 하면 되는 것을 알수 있다(명령어에 추가적인 경로 필요 없이)
        4) python manage.py loveyou 실행해보기 -> AttributeError: module 'rooms.management.commands.loveyou' has no attribute 'Command' 
                                                    -> class Command 가 필요하다는 의미
        5) loveyou.py에 아래와 같이 입력하고 python manage.py loveyou 재실행
            class Command:
                print("hello")
            -> AttributeError: 'Command' object has no attribute 'run_from_argv'
                -> from django.core.management.base import BaseCommand 해주고 다시
                    -> NotImplementedError: subclasses of BaseCommand must provide a handle() method
                        ->  def handle(self, *args, **options): handle 정의해준다
                                print(args, options) 해주고 python manage.py loveyou --times 50 입력하면 아래와 같이 출력
                                () {'verbosity': 1, 'settings': None, 'pythonpath': None, 'traceback': False, 'no_color': False, 'force_color': False, 'skip_checks': False, 'times': '50'}
                                즉, args는 비어있고, options는 verbosity, settings 등이 들어가있는 dictionary임 / times에 50이라는 값이 들어감
                                    ->아래와 같이 입력하고 python manage.py loveyou -times 50 다시 입력하면 command 실행  
                                            def handle(self, *args, **options):
                                                times = options.get("times")
                                                for t in range(0, int(times)):
                                                    print(t+1, "I Love you")

                                                    print 대신에 self.stdout.write(self.style.SUCCESS(f"{t+1} I love you"))

        *) 실행시킬 argument 추가
            def add_arguments(self, parse):
                parser.add_argument("--something") or parser.add_argument("--something", help="blah blah~") or   
            python manage.py --sometging some -> some에 값 입력           

                                                

# 9.1 
    seed_.py 만들기
        - seed_.py 순서: seed_amenities.py -> seed_facilities.py -> seed_users.py -> seed_rooms.py  -> photos, amenities, facilites, house_type, house_rule 등 rooms에 뿌려주기
    
    명령어: python manage.py seed_amenities  -> config/settings.py/THIRD_PARTY_APPS 에 "django_seed" 추가


# 9.2
    seed_users.py 만들기
        1) from django_seed import Seed

# 9.3
    seed_rooms.py 만들기
        1) IndexError: list index out of range 오류 생기는 경우 : RoomType에 아무것도 없을 경우 이 에러 발생했음
    faker: 많은 faker 기능이 있음, 검색해보자

# 9.4
    django_seed는 primary key array를 return 해준다
    seed_rooms.py에 사진 파일 뿌려주는 작업중인데,
    seed.execute를 저장해서 values 값 얻어주면 dict_values가 나와서 이를 list화 해주고 list(seed.execute().values)
    list 안에 list 로 들어가는 꼴이기 때문에 이를 django utils 중 flatten을 이용해서 하나의 list로 만든다 (2중 리스트를 flatten)
        from django.contrib.admin.utils import flatten (설명: https://blog.winterjung.dev/2017/04/21/list-of-lists-to-flatten)
            flatten(list(seed.execute().values()))

# 9.5
    .add() : many-to-many field에서 무언가를 추가하는 방법임
        room.amenities.add(a)

# 9.7
    list_model.rooms.add(*to_add)
        -> to_add는 array이고, 원하는 것은 argument 이기 때문에 앞에 * 붙임 (*args, **kwargs랑 비슷한 느낌?)




# 10.0
    config/urls.py의
    urlpatterns = [path("admin/", admin.site.urls)] 
    ** url은 config/urls.py 의 urlpatterns에 기록해야 하는데, 양이 많아지니, 각 application 내부에 urls.py를 만들어서 import 해주는 식으로 처리 **
        강의에서는 만들어줄 url에 해당하는 폴더가 있으면 그 폴더에 urls.py를 만들어주고, 그게 없으면 core에 urls.py 생성 (from django.urls import path)
    - "admin/" : url (내가 부여하는 주소)
    - admin.site.urls: view (어디서 가져올지 경로 지정)
        view는 function임, 이 function을 views에 넣어서 실행시킬 것임
        - rooms/views.py에 view(즉, function)을 만들고
        - config/urls.py에서 view를 import 해주기 
            -> include 를 이용해서 import
               1) config/urls.py에 from django.urls import path 에 include 추가 (from django.urls import path, include)
               2) path("", include("core.urls"))를 urlpatterns에 추가
    - ex) core/urls.py        
            from django.urls import path
            from rooms import views as room_views

            urlpatterns = [path("", room_views.all_rooms, name=),]
    
        config/urls.py
            from django.contrib import admin
            from django.urls import path, include
            from django.conf import settings
            from django.conf.urls.static import static

            urlpatterns = [
                path("", include("core.urls", namespace="core")),
                path('admin/', admin.site.urls),
            ]


        core/urls.py에서
        "": url 지정
        room_views.all_rooms: 경로 지정
        name= : view의 이름 지정

        config/urls.py에서
        include: 다른 곳에서 url import 하는 방법

        name & namespace
            name: core/urls.py의 urlpatterns에 넣어주었고
            namespace: config/urls.py의 urlpatterns의 include 안에 추가
                namespace를 쓰기 위해, include로 import 해줄 urls.py 안에 app_name 지정: 
                    < include, namespace -> config/urls.py에 // name, appname -> core/urls.py or rooms/urls.py 등 >
                        -> namespace 와 app_name 은 같아야 함 (ex: namespace="core", app_name="core")
                (django.core.exceptions.ImproperlyConfigured: Specifying a namespace in include() without providing an app_name is not supported. 
                Set the app_name attribute in the included module, or pass a 2-tuple containing the list of patterns and app_name instead.)

# 10.1
    View: 뷰는 그 Url로 들어갈 때마다 HTTP Request를 생성한다
        그리고 그 request에 응답해주는것이 브라우저가 돌아가는 방법이다 (HTTP에 있는 기능임 - Django가 아니라)
        어떻게 응답해주느냐? HttpResponse로!!
        rooms/views.py에 
        
        from django.http import HttpResponse
        
        def all_rooms(request):
            return HttpResponse(content="hello")
        
        -> request에 HttpResponse로 반응 해주는 것!
        
            HttpResponse 대신에 render 사용 가능
    
    render 
        ex)
        from django.shortcuts import render

        def all_rooms(request):
            return render(request, template_name, context=None, content_type=None, status=None, using=None)
        
        render를 쓰기 위해서는 templates 폴더를 생성(naming 변경 불가)
        -> config/settings.py에 TEMPLATES.DIRS에 경로 지정: os.path.join(BASE_DIR, "templates"): 아래와 같이 해주어야 browser가 template 찾아서 render 할 수 있음
                    TEMPLATES = [
                        {
                            'BACKEND': 'django.template.backends.django.DjangoTemplates',
                            'DIRS': [os.path.join(BASE_DIR, "templates")],
                            'APP_DIRS': True,
                            'OPTIONS': {
                                'context_processors': [
                                    'django.template.context_processors.debug',
                                    'django.template.context_processors.request',
                                    'django.contrib.auth.context_processors.auth',
                                    'django.contrib.messages.context_processors.messages',
                                ],
                            },
                        },
                    ]

        context: python 변수를 html로 보내주는 것: context={"a": b, "a": b, ...} (dictionary 형태)
            -> "a": b --> a에는 template에서 불려질 name, b는 변수명
            해당하는 template(html)에 가서 {{a}} 입력해주면 됨 

            
# 10.3
    extends: html에서 html 불러오기(확장하기) 
    ex) base.html: 여러 곳에서 반복해서 쓰일 기초되는 html
        home.html에서 base.html을 토대로 쓰려면 home.html에 {% extends 'base.html' %} 해준다

        block: 
            extends를 했다면, extends를 한 것이 어디에 위치하는지를 설정해주어야 한다. block이 그 기능을 수행
            base.html에 원하는 곳에 {% block 'name' %}{% endblock 'name' %}  (endblock에 'name' 없어도 되나 쓰면 찾기에 좋은 듯)
            base.html을 사용하려는 곳에 (ex- home.html) {% block 'name' %} 내용입력 {% endblock 'name'}
        
        include:
            block은 html 전체가 아닌 부분의 내용을 넣는 방법이고,
            html 내용을 통으로 넣는 방법이 include 
            -> {% include '경로' %} (ex- templetes/partials/footer.html을 가져오고자 하는 경우: {% include 'partials/footer.html' %})

# 11.1
    request.GET
    ex. 
        (rooms/views.py)
        def all_rooms(request):
            print(request.GET)을 한다면 Url 정보를 얻을 수 있다. <QueryDict {'page': ['2']}> 등의 정보 - ?page=2*city=seoul 등으로 url에 쓰이는 page 등을 convention이라 한다?
    request에 무엇이 있는지 보려면, Django document에서 찾아 볼 수도 있음
    request.GET으로 얻어지는 것은 QuerySet이고, vars, dir 등으로 request.GET안에 있는 기능 볼 수 있고 사용할 수 있다.
    (rooms/views.py)
    def all_rooms(request):
        print(request.GET.get("page"))      
        print(request.GET.get("page", 1))       # 1 -> page 값이 없을 때 설정해주는 default


# 11.2
    (rooms/views.py)
    def all_rooms(request):
        page = request.GET.get("page", 1)
        page  = int(page or 1)                  # 이런 기능을 씀...
    
        return render(request, "rooms/home.html", {"page_range": range(1, page_count)})         # 이런식으로 range 도 context로 template에 넘겨줄 수 있다.


# 11.3
    template - filter
    {{page|add:-1}}


# 11.4
    Paginator - Django
    (rooms/views.py)
    from django.core.paginator import Paginator
    def all_rooms(request):
        page = request.GET.get("page")                              # Paginator는 default도 필요 없음
        room_list = models.Room.objects.all()                       # Paginator는 list가 필요함(아래와 같이)
        paginator = Paginator(room_list, 10)                        # Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)
        rooms = paginator.get_page(page)                            # paginator로부터 페이지를 가져오는 것 / print(vars(rooms))를 해보면, object_list가 나온다 - paginator로 얻은 1페이지의 queryset이 나오는것 같음... ,그 외 number도 나옴
                                                                    # print(vars(rooms))를 또 보면 'paginator':<django.core.~> 이런식으로 나오는데, paginator를 살펴보자 : print(vars(rooms.paginator)) -> 여기서도 object_list가 나옴 + 'num_pages'도 나옴
                                                                    # rooms.object_list, rooms.paginator.num_pages, rooms.paginator.page_range 등 이용 (document에도 다 있음)
        return render(request, "rooms/home.html", {"rooms": rooms}) # 강의에서 "rooms"를 "page"로 바꾸고 template에서도 바꿔주었으니 참고
    
    (templates/rooms/home.html)
    rooms를 불러오는데, rooms.object_list를 불러오자
    {% for room in rooms.object_list %}                             # rooms.object_list를 page.object_list 등으로 바꿔주었음 참고
    {% endfor %}

    {% if page.has_previous %}                                      # 앞에 더 페이지가 남은게 없으면 Previous를 안보이기도 함/ URL로 직접 들어가는 것에 대한 오류발생 막아주는 것은 얘 때문이 아니라 get_page()를 썼기 때문: 마지막 페이지를 보여줌 - (rooms = paginator.get_page(page))
        <a href="?page={{page.previous_page_number}}">Previous</a>
    {% endif %}
    Page {{page.number}} of {{page.paginator.num_pages}}
    {% if page.has_next %}                                          # 뒤에 더 페이지가 남은게 없으면 Next를 안보이기도 함/ URL로 직접 들어가는 것에 대한 오류발생 막아주는 것은 얘 때문이 아니라 get_page()를 썼기 때문: 마지막 페이지를 보여줌 - (rooms = paginator.get_page(page))
        <a href="?page={{page.next_page_number}}">Next</a>
    {% endif %}
                                                                    # get_page() 대신, page()를 써서, 없는 페이지로 URL을 통해 접근할 떄 처음이나 마지막화면 띄우는 것 말고 Error를 다뤄줄 수 있다.


# 11.7 
    ccbv.co.uk 에서 View와 관련된 것들 쉽게 볼 수 있다.
    
    ListView: self.object_list
        -> views.py에 사용할 모델 호줄 model = models.Room
        -> 템플릿에서 {% for room in rooms.object_list %} 라고 썼던 것을 {% for room in object_list %}라고 사용
            여기까지만 해도 전체 list가 나타난다
        paginate_by = 10 : 10/page
        ordering = "created" 라고 강의에 했으나 없고 "created_at"인듯..
        paginate_orphans= 5
        template에서는 page_obj 사용 -> {% if page_obj.has_previous %}, {{page_obj.number}} 등
        context_object_name = "rooms" : template에서 object_list 대신에 rooms로 호출하도록 변경하는 것 

# 11.8 
    def get_context_data()  : 모든 View는 get_context_data 를 method로 갖고 있다함
    context : templates으로 가는 변수
    
    class ~(ListView):
        def get_context_data(self, **kwargs):
            context = super().get_context_data(**kwargs)            # super 호출 필수
            context['now'] = timezone.now()
            return context


# 12.0
    dispatcher: url에 변수를 갖을수 있도록 하는것 : <int:~> - django documentation의 path 부분을 살펴보자
    {% url "x:y" z %} 
        -> x = namespace (of the url, (or app_name)) 
           y = name (of the path (in app_name))
           z = all of arguments
                urlpatterns 안에 path 에 지정해준 url 변수에 해당하는 arguments를 넣어줘야 함
                ex) urlpatterns = [path("home/<int:pk>", views~ )] 에서 <int:pk>는 정수로 된 pk 변수를 받는다는 의미   
                    z는 그 pk 변수를 지정(즉, z는 url의 변수에 들어갈 argument) (ex. room.pk)
                    -> url에 pk를 사용하려면, views.py에서 request를 통해 받아오는 곳에 pk 인자를 받아와야 한다고 표시해야 한다.(넣어줘야 한다.)
                        -> (rooms/views.py)
                            def room_detail(request, pk):
                    -> 즉, views.py 에서 request와 함께 pk를 받아오고, 그 pk를 urls에서 불러와서 사용

# 12.1
    get_absolute_url
        -> def get_absolute_url(self): 
                return "/potato"
            를 해주면, admin 창에서 potato url로 바로 갈수 있는 view_on_site 생성 

        -> 아래와 같이 표현하는 것도 가능
            def get_absolute_url(self):
                return reverse("namespace:name", kwargs={"변수": self.argument})
            ex) return reverse("rooms:detail", kwargs={"pk":self.pk})
            단, reverse는 쓰려면 import 해줘야 함 : from django.urls import reverse
            ex) <int:pk> 에서 pk를 변수로 가져오고, argument는 class의 pk로 한다고 하면
                def get_absolute_url(self):
                    return reverse("namespace:name", kwargs={"pk": self.pk})

# 12.2
    DoesNotExist : 존재하지 않는 url로 접근시 에러 처리할 수 있게 해주는 구문

# 12.3
    Http404(): from django.http import Http404
    에러처리에 raise http404()
    * templates/404.html 을 만들어주기만 하면 자동으로 render 한다 (따로 url 지정 없이도)

    DEBUG = False 를 써주기 위해서
        ALLOWED_HOSTS = "*" 으로 변경 해주기 (config/settings.py)

# 12.4
    DeatilView : Django는 DetailView 를 사용하면, View가 url argument로 pk를 찾는다 (Views.py에 따로 pk 찾는 함수 설정 안해도)
        - DeatilView가 찾아야 하는 default 가 'pk'로 되어 있음 -> 바꾸러면 views.py 에서 class ~(DeatilView) 안에 pk_url_kwarg='pk'를 바꿔주면 됨
        - DeatilView는 404 페이지를 자동적으로 생성


Search View
# 13.0
    (rooms/views.py)
    from django.shortcuts import render
    def search(request):
        return render(request, "rooms/search.html")

    (rooms/urls.py)
    path("search/", views.search, name="search")

    (templates/rooms/search.html)
    <h3>Search</h3>

    (templates/partials/header.html)
    <form method="get" action="{% url 'rooms:search' %}">
        <input name="city" placeholder="Search by City" />
    </form>

    (rooms/views.py)
    from django.shortcuts import render
    def search(request):
        city = request.GET.get("city")
        city = str.capitalize(city)
        return render(request, "rooms/search.html", {"city": city})


# 13.1
    무엇을 검색하느냐에 따라서 value가 바뀔수 있게, value 추가하자. 근데 header에서는 여기에 접근할수 없으니 다른 곳으로 옮기자 함...
    header.html에 입력한것을 지우고(잘라내서)
    (tempaltes/base.html)
    <header>
        {% include "partials/nav.html" %}
        {% block search-bar %}
        <form method="get" action="{% url 'rooms:search' %}">
            <input name="city" placeholder="Search by City" />
        </form>
        {% endblock search-bar %}
    </header>

    (templates/rooms/search.html)
        {% block search-bar %}
        {% endblock search-bar %}           -> search를 숨길 수 있다

        {% block content %}
        <form method="get" action="{% url 'rooms:search' %}">
            <input value="{{city}}" name="city" placeholder="Search by City" />
        </form>
        {% endblock content %}

    (rooms/views.py)
    from django.shortcuts import render
    def search(request):
        city = request.GET.get("city", "Anywhere")                      # "Anywhere"를 default로 주어서, 아무 값도 없을때 오류 막기
        city = str.capitalize(city)
        return render(request, "rooms/search.html", {"city": city})


    (rooms/views.py)
    from django.shortcuts import render
    from django_countries import countries                          # country도 추가해보자
    def search(request):
        city = request.GET.get("city", "Anywhere")                      
        city = str.capitalize(city)
        return render(request, "rooms/search.html", {"city": city, "countries": countries})


    (templates/rooms/search.html)
        {% block search-bar %}
        {% endblock search-bar %}           

        {% block content %}
        <form method="get" action="{% url 'rooms:search' %}">
            <div>
                <label for="city">City</label>
                <input value="{{city}}" id="city" name="city" placeholder="Search by City" />
            </div>

            <div>
                <label for="country">Country</label>
                <select id="country" name="country">
                    {% for country in countries %}
                        <option value="{{country.code}}">{{country.name}}</option>              # 데이터베이스에는 country의 이름이 아니라 코드가 저장되어 있으므로 value="{{country.code}}" 사용
                    {% endfor %}
                </select>
            </div>
            <button>Search</button>                             # <form>이 한개만 있으므로 submit 안쓰고 button 써도 button이 submit 역할을 함
        </form>
        {% endblock content %}

    이제 roomtype도 가져와보자
    (rooms/views.py)
    from django.shortcuts import render
    from django_countries import countries                          
    def search(request):
        city = request.GET.get("city", "Anywhere")                      
        city = str.capitalize(city)
        room_types = models.RoomType.objects.all()
        return render(request, "rooms/search.html", {"city": city, "countries": countries, "room_types": room_types})

    (templates/rooms/search.html)
        {% block search-bar %}
        {% endblock search-bar %}           

        {% block content %}
        <form method="get" action="{% url 'rooms:search' %}">
            <div>
                <label for="city">City</label>
                <input value="{{city}}" id="city" name="city" placeholder="Search by City" />
            </div>

            <div>
                <label for="country">Country</label>
                <select id="country" name="country">
                    {% for country in countries %}
                        <option value="{{country.code}}">{{country.name}}</option>              # 데이터베이스에는 country의 이름이 아니라 코드가 저장되어 있으므로 value="{{country.code}}" 사용
                    {% endfor %}
                </select>
            </div>
            <div>
                <label for="room_type">Room Types</label>
                <select id="room_type" name="room_type">
                    {% for room_type in room_types %}
                        <option value="{{room_type.pk}}">{{room_type.name}}</option>
                    {% endfor %}
                </select>
            </div>
            <button>Search</button>                             # <form>이 한개만 있으므로 submit 안쓰고 button 써도 button이 submit 역할을 함
        </form>
        {% endblock content %}                                  # 여기까지 해주면 url에는 원하는대로 submit해준게 나타나지만, submit후 새로고쳐진 페이지에서 선택한 값들이 그대로 나타나지 않고 변한다.


선택한 것들을 페이지가 기억하도록 만들자
# 13.2
(rooms/views.py)
from django.shortcuts import render
from django_countries import countries                          
def search(request):
    city = request.GET.get("city", "Anywhere")                      
    city = str.capitalize(city)
    country = request.GET.get("country", "KR")              # "KR"을 default로 놔보자
    room_type = request.GET.get("room_", 0)
    room_types = models.RoomType.objects.all()
    return render(request, "rooms/search.html", {"city": city, "countries": countries, "room_types": room_types, "room_type":room_type, "country": country})

위에 작성한 것을, 나눠보자 -> request에서 오는것은 form으로, database에서 오는 것은 choices로
(rooms/views.py)
from django.shortcuts import render
from django_countries import countries                          
def search(request):
    city = request.GET.get("city", "Anywhere")                      
    city = str.capitalize(city)
    country = request.GET.get("country", "KR")              # "KR"을 default로 놔보자
    room_type = int(request.GET.get("room_type", 0))        # pk 값을 이용할 것이니까 int 씌우자
    room_types = models.RoomType.objects.all()

    form = {
        "city": city, "s_room_type":room_type, "s_country": country
    }

    choices = {
        "countries": countries, "room_types": room_types,
    }

    return render(request, "rooms/search.html", {**form, **choices})     # form과 choice를 언팩

    이제 고른 국가코드가 현재 국가 코드랑 같은지 확인하는 것 등을 할 것, 만약 같으면 저장하기
    # 값 submit -> submit된 값을 request를 통해서 가져오고, template에서 context를 통해 if구문으로 값이 일치하면 표시해주기(if문 통과하면 selected 등이 되도록)

    (templates/rooms/search.html)
        {% block search-bar %}
        {% endblock search-bar %}           

        {% block content %}
        <form method="get" action="{% url 'rooms:search' %}">
            <div>
                <label for="city">City</label>
                <input value="{{city}}" id="city" name="city" placeholder="Search by City" />
            </div>

            <div>
                <label for="country">Country</label>
                <select id="country" name="country">
                    {% for country in countries %}
                        <option value="{{country.code}}" {% if country.code == s_country %}selected{% endif %}>{{country.name}}</option>              
                    {% endfor %}
                </select>
            </div>
            <div>
                <label for="room_type">Room Types</label>
                <select id="room_type" name="room_type">
                    <option value="0" {% if s_room_type == 0 %}selected{% endif %}>Any kind</option>
                    {% for room_type in room_types %}
                        <option value="{{room_type.pk}}" {% if s_room_type == room_type.pk %}selected{% endif %}>{{room_type.name}}</option>
                    {% endfor %}
                </select>
            </div>
            <button>Search</button>                             # <form>이 한개만 있으므로 submit 안쓰고 button 써도 button이 submit 역할을 함
        </form>
        {% endblock content %} 

추가: ManyToMany 위주로 어떻게 하는지 자세히
# 13.3 & 13.4
    (templates/rooms/search.html)
    <div>
        <label for="price">Price</label>
        <input value="{{price}}" type="number" name="price" id="price" placeholder="Price" />
    </div>
    <div>
        <label for="guest">Guest</label>
        <input value="{{guest}}" type="number" name="guest" id="guest" placeholder="Guest" />
    </div>

    (rooms/views.py)
    from django.shortcuts import render
    from django_countries import countries                          
    def search(request):
        city = request.GET.get("city", "Anywhere")                      
        city = str.capitalize(city)
        country = request.GET.get("country", "KR")              # "KR"을 default로 놔보자
        room_type = int(request.GET.get("room_type", 0))        # pk 값을 이용할 것이니까 int 씌우자
        room_types = models.RoomType.objects.all()
        price = int(request.GET.get("price", 0))
        guests = int(request.GET.get("guests", 0))              
        amenities = models.Amenity.objects.all()
        facilities = models.Facility.objects.all()
        s_amenities = request.GET.getlist("amenities")              # ManyToMany에 해당하는 부분을 복수로 선택할때, list로 값을 가져오기 위해서 getlist를 쓰자          

        form = {
            "city": city, "s_room_type":room_type, "s_country": country, "s_amenities": s_amenities, "price": price, "guest": guest
        }

        choices = {
            "countries": countries, "room_types": room_types, "amenities": amenities, "facilities": facilities
        }

        return render(request, "rooms/search.html", {**form, **choices})     # form과 choice를 언팩

    (templates/rooms/search.html)
    <div>
        <h3>Amenities</h3>
        <ul>
            {% for amenity in amenities %}
                <li>
                    <label for = "a_{{amenity.pk}}">{{amenity.name}}</label>
                    <input 
                        id="a_{{amenity.pk}}" 
                        name="amenities" 
                        type="checkbox" 
                        value={{amenity.pk}}
                        {% if amenity.pk|slugify in s_amenities %}                      # s_amenities는 str인데 amenity.pk는 int라 slugify가 필요(slugify는 전부 str로 바꿔준다)
                            checked
                        {% endif %}
                    />
                </li>
            {% endfor %}
        </ul>
    </div>


search by filter
구체적인 사항은 django documentation의 Field lookups 부분을 보면 된다
# 13.5
    (rooms/views.py)
    from django.shortcuts import render
    from django_countries import countries                          
    def search(request):
        city = request.GET.get("city", "Anywhere")                      
        city = str.capitalize(city)
        country = request.GET.get("country", "KR")              # "KR"을 default로 놔보자
        room_type = int(request.GET.get("room_type", 0))        # pk 값을 이용할 것이니까 int 씌우자
        room_types = models.RoomType.objects.all()              
        amenities = models.Amenity.objects.all()
        facilities = models.Facility.objects.all()
        s_amenities = request.GET.getlist("amenities")              # ManyToMany에 해당하는 부분을 복수로 선택할때, list로 값을 가져오기 위해서 getlist를 쓰자          

        form = {
            "city": city, "s_room_type":room_type, "s_country": country, "s_amenities": s_amenities
        }

        choices = {
            "countries": countries, "room_types": room_types, "amenities": amenities, "facilities": facilities
        }

        filter_args = {}

        if city != "Anywhere":
            filter_args["city__startswith"] = city

        filter_args["country"] = country

        if room_type != 0:
            filter_args["room_type__pk"] = room_type

        rooms = models.Room.objects.filter(**filter_args)

        if len(s_amenities) > 0:
            for s_amenity in s_amenities:
                rooms = rooms.filter(amenities__pk=int(s_amenity))                          # 강의 댓글에 달린 부분인데, 강의보다 이게 맞는 듯

        return render(request, "rooms/search.html", {**form, **choices, "rooms":rooms})
    

    (templates/rooms/search.html)

    {% for room in rooms %}
        {{room.name}}
    {% endfor %}

    # 요약: filter로 빈 dictionary를 만들고(filter_args={}), 그 dictionary에 조건에 해당하는 것들을 담고(filter_args["country"]=country), 담아진 것들만 context로 return해서 template에서 보여주기


Search - by Django
# 13.7 & 13.8
    Django forms API

    (rooms/forms.py)
    from django import forms
    class SearchForm(forms.Form):
        pass

    (rooms/views.py)
    from . import forms
    def search(request):
        form = forms.SearchForm()
        return render(request, "rooms/search.html", {"form": form})

    (templates/rooms/search.html)
        <form method="get" action="{% url 'rooms:search' %}">
            {{form}}
            <button>Search</button>
        </form>

    (rooms/forms.py)
    from django import forms
    from django_countries.fields import CountryField
    from . import models
    class SearchForm(forms.Form):
        city = forms.CharField(initial="Anywhere")              # city = forms.CharField(help_text="플레이스 홀더 대신 쓸 수 있는 설명") 이런것도 가능 models.CharField()내부 등에도 사용 가능 참고
        country = CountryField(default="KR").formfield()
        price = forms.IntegerField(required=False)
        room_type = forms.ModelChoiceField(required=False, empty_label="Any kind", queryset=models.RoomType.objects.all())
        guests = forms.IntegerField(required=False)
        bedrooms = forms.IntegerField(required=False)
        beds = forms.IntegerField(required=False)
        baths = forms.IntegerField(required=False)
        instant_book = forms.BooleanField(required=False)
        superhost = forms.BooleanField(required=False)
        amenities = forms.ModelMultipleChoiceField(queryset=models.Amenity.objects.all(), widget=forms.CheckboxSelectMultiple)
        facilities = forms.ModelMultipleChoiceField(queryset=models.Facility.objects.all(), widget=forms.CheckboxSelectMultiple)
    
    -> 여기까지 하면, 화면은 구성되는데, Search 버튼 눌르면 기능 작동은 안함


# 13.9
    (rooms/views.py)
    def search(request):

        country = request.GET.get("country")

        if country:
            form = forms.SearchForm(request.GET)
            if form.is_valid():
                city = form.clenaed_data.get("city")
                country = form.clenaed_data.get("country")
                room_type = form.clenaed_data.get("room_type")
                price = form.clenaed_data.get("price")
                guests = form.clenaed_data.get("guests")
                bedrooms = form.clenaed_data.get("bedrooms")
                beds = form.clenaed_data.get("beds")
                baths = form.clenaed_data.get("baths")
                instant_book = form.clenaed_data.get("instant_book")
                superhost = form.clenaed_data.get("superhost")
                amenities = form.clenaed_data.get("amenities")
                facilities = form.clenaed_data.get("facilities")

                filter_args = {}

                if city != "Anywhere":
                    filter_args["city__startswith"] = city

                filter_args["country"] = country

                if room_type is not None:
                    filter_args["room_type"] = room_type

                rooms = models.Room.objects.filter(**filter_args)

                for amenity in amenities:
                    filter_args["amenities"] = amenity                        

                return render(request, "rooms/search.html", {"form": form, "rooms":rooms})
                
        else:
            form = forms.SearchForm()
        
        return render(request, "rooms/search.html", {"form": form})

    * class based view로 바꿔보자
    (rooms/views.py)
    from django.views.generic import View
    
    class SearchView(View):
        def get(self, request):

            country = request.GET.get("country")

            if country:

                form = forms.SearchForm(request.GET)

                if form.is_valid():

                    city = form.cleaned_data.get("city")
                    country = form.cleaned_data.get("country")
                    room_type = form.cleaned_data.get("room_type")
                    price = form.cleaned_data.get("price")
                    guests = form.cleaned_data.get("guests")
                    bedrooms = form.cleaned_data.get("bedrooms")
                    beds = form.cleaned_data.get("beds")
                    baths = form.cleaned_data.get("baths")
                    instant_book = form.cleaned_data.get("instant_book")
                    superhost = form.cleaned_data.get("superhost")
                    amenities = form.cleaned_data.get("amenities")
                    facilities = form.cleaned_data.get("facilities")

                    filter_args = {}

                    if city != "Anywhere":
                        filter_args["city__startswith"] = city

                    filter_args["country"] = country

                    if room_type is not None:
                        filter_args["room_type"] = room_type

                    if price is not None:
                        filter_args["price__lte"] = price

                    if guests is not None:
                        filter_args["guests__gte"] = guests

                    if bedrooms is not None:
                        filter_args["bedrooms__gte"] = bedrooms

                    if beds is not None:
                        filter_args["beds__gte"] = beds

                    if baths is not None:
                        filter_args["baths__gte"] = baths

                    if instant_book is True:
                        filter_args["instant_book"] = True

                    if superhost is True:
                        filter_args["host__superhost"] = True

                    for amenity in amenities:
                        filter_args["amenities"] = amenity

                    for facility in facilities:
                        filter_args["facilities"] = facility

                    rooms = models.Room.objects.filter(**filter_args)

            else:

                form = forms.SearchForm()

            return render(request, "rooms/search.html", {"form": form, "rooms": rooms})


# 13.10
    pagination
    (rooms/views.py)
    from django.core.paginator import Paginator
    class SearchView(View):
        def get(self, request):
            country = request.GET.get("country")
            if country:
                form = forms.SearchForm(request.GET)
                if form.is_valid():
                    city = form.cleaned_data.get("city")
                    country = form.cleaned_data.get("country")
                    room_type = form.cleaned_data.get("room_type")
                    price = form.cleaned_data.get("price")
                    guests = form.cleaned_data.get("guests")
                    bedrooms = form.cleaned_data.get("bedrooms")
                    beds = form.cleaned_data.get("beds")
                    baths = form.cleaned_data.get("baths")
                    instant_book = form.cleaned_data.get("instant_book")
                    superhost = form.cleaned_data.get("superhost")
                    amenities = form.cleaned_data.get("amenities")
                    facilities = form.cleaned_data.get("facilities")
                    filter_args = {}
                    if city != "Anywhere":
                        filter_args["city__startswith"] = city
                    filter_args["country"] = country
                    if room_type is not None:
                        filter_args["room_type"] = room_type
                    if price is not None:
                        filter_args["price__lte"] = price
                    if guests is not None:
                        filter_args["guests__gte"] = guests
                    if bedrooms is not None:
                        filter_args["bedrooms__gte"] = bedrooms
                    if beds is not None:
                        filter_args["beds__gte"] = beds
                    if baths is not None:
                        filter_args["baths__gte"] = baths
                    if instant_book is True:
                        filter_args["instant_book"] = True
                    if superhost is True:
                        filter_args["host__superhost"] = True
                    for amenity in amenities:
                        filter_args["amenities"] = amenity
                    for facility in facilities:
                        filter_args["facilities"] = facility

                    qs = models.Room.objects.filter(**filter_args).order_by("-created")

                    paginator = Paginator(qs, 10, orphans=5)

                    page = request.GET.get("page", 1)

                    rooms = paginator.get_page(page)

                    return render(request, "rooms/search.html", {"form": form, "rooms": rooms})

            else:
                form = forms.SearchForm()

            return render(request, "rooms/search.html", {"form": form})


USER LOGIN & LOG OUT
#14.0
    /users/login 으로 url을 해줄 예정(그냥 /login 할거라면 core에 시작하면 된다)

    (users/views.py)
        from django.views import View
        
        class LoginView(View):
            def get(self, request):
                pass

            def post(self,request):
                pass

        """위를 FBV로 한다고 하면 아래와 같다
        def login_view(request):
            if request.method == "GET":
                pass
            if request.method =="POST":
                pass
                """

    (users/urls.py)
        from django.urls import path
        from . import views

        app_name = "users"

        urlpatterns = [
            path=("login"/, views.LoginView.as_view(), name="login")
        ]

    (config/urls.py)
        path("users/", include(users.urls", namespace="users"))

    (templates/partials/nav.html)
        <a href="{% url 'users:login' %}">Login</a>

    (users/views.py)
        from django.views import View
        from django.shortcuts import render
        
        class LoginView(View):
            def get(self, request):
                return render(request, "users/login.html")     

            def post(self,request):
                pass
    

# 14.1 & 14.2 & 14.3
    (users/forms.py)
        from django import forms

        class LoginForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

    (users/views.py)
        from django.views import View
        from django.shortcuts import render
        from . import forms
        
        class LoginView(View):
            def get(self, request):
                form = forms.LoginForm()
                return render(request, "users/login.html", {"form": form})      # context={"form": form} 대신에 {"form":form}으로 작성해도 똑같음

            def post(self,request):
                pass

    (templates/users/login.html)
        {% block content %}
            <form method="POST", action="{% url 'users:login' %}">
                {% csrf_token %}                                        # csrf_token : POST로 보낼때, 보안을 위해 필수 사용(안쓰면 에러 발생)
                {{form.as_p}}                                           # as_p : 줄바꿈
                <button>Login</button>
            </form>
        {% endblock content %}

    (users/views.py)
        from django.views import View
        from django.shortcuts import render
        from . import forms
        
        class LoginView(View):
            def get(self, request):
                form = forms.LoginForm()                                    # form = forms.LoginForm(initial={"email": "itn@las.com}) - 나는 지금 안쓰지만 아이디 저장 기능 쓸 때 혹시 참고
                return render(request, "users/login.html", {"form": form})   

            def post(self,request):
                form = forms.LoginForm(request.POST)                        # print(form) 해보기
                print(form.is_valid())                                      # login 해보면 True 출력 됨, 데이터 자체는 유효하다는 의미 (비번이 맞는지, 아이디가 있는지 등등 판단은 아님)
                return render(request, "users/login.html", {"form": form})

    (users/forms.py)
        from django import forms

        class LoginForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

            def clean_email(self):               # clean_email: 그냥 명명해준것 X, 이메일이나 비밀번호가 있는 field를 확인하고 싶으면 method의 이름은 clena_~ 이어야 한다
                print("clean email")

            def clean_password(self):
                print("clean password")         # 이렇게 하고 Login 클릭해주면,  clena email, clena password, True (print(form.is_valid())순으로 출력되는것 확인 가능

    """clean_ 설명
        clean_~은 에러를 다루는 것(?) 외에도 데이터를 정리하는 기능도 있다 -> def clean_email(self): 는 email의 form값을 받아서 (설정해주는 대로) 처리가 가능하다.
        위에서 처럼 return은 하지 않고 print("clean email") 등만 해주고
        views.py/LoginView 에서
            def post(self,request):
            form = forms.LoginForm(request.POST)
            if form.is_valid():
                print(Form.cleaned_data) 를 해주면      # cleaned_data : 모든 필드를 정리해준 것에 대한 결과 
        -> {'email': None, 'password': None} 이 출력됨. // clean_email, clean_password를 안해주었다면, 웹에서 입력해준대로 이메일, 비번이 출력되는데, clean_을 써주면, clean_이 return 해준 값이 출력 - clean method를 사용하면, return 해주지 않으면 field 값을 지워버림
        -> 이를 이용해서 아이디가 있는지, 비번이 맞는지 등을 판단 할 것임"""

   (users/forms.py)
        from django import forms
        from . import models

        class LoginForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

            def clean_email(self):
                email = self.cleaned_data.get("email")                    # print(self.cleaned_data) : {'email':itn@las.com, 'password':~~} - 브라우저에서 입력해준 값이 출력됨               
                try:
                    models.User.objects.get(email=email)                  # 기존에 username=email인 user가 있다면 입력된 email로 로그인 시켜주기
                    return email
                except models.User.DoesNotExist:
                    raise forms.ValidationError("User does not exist")

            def clean_password(self):
                email = self.cleaned_data.get("email")
                password = self.cleaned_data.get("password")
                try:
                    user = models.User.objects.get(username=email)
                    if user.check_password(password):                   # check_password : user가 있을때 password를 확인하는 기능 - django documentation
                        return password
                    else:
                        raise forms.ValidationError("Password is wrong")

        --> 너무 반복해서 많이 썼음. 코드를 합쳐서 정리를 하자

    (users/forms.py)
        from django import forms
        from . import models

        class LoginForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

            def clean(self):
                email = self.cleaned_data.get("email")
                password = self.cleaned_data.get("password")
                try:
                    user = models.User.objects.get(email=email)                 # user가 존재하고
                    if user.check_password(password):                           # password가 일치하면
                        return self.cleaned_data                                # cleaned_data return
                    else:
                        raise forms.ValidationError("Password is wrong")
                except models.User.DoesNotExist:
                    raise forms.ValidationError("User does not exist")         # 이렇게 하고 error 발생시키면, error가 발생한 부분에서 표시되는게 아니라 전체적으로 error가 있다고 표시됨 - 이를 수정하자 : forms.add_error()를 사용해서

    (users/forms.py)
        from django import forms
        from . import models

        class LoginForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

            def clean(self):
                email = self.cleaned_data.get("email")
                password = self.cleaned_data.get("password")
                try:
                    user = models.User.objects.get(email=email)
                    if user.check_password(password):                   
                        return self.cleaned_data
                    else:
                        self.add_error("password", forms.ValidationError("Password is wrong"))  # "password" : password에서 에러가 왔다는 의미
                except models.User.DoesNotExist:
                    self.add_error("email", forms.ValidationError("User does not exist"))   # "email" form에서 ValidationError가 발생했다는 의미 
        """clena method를 사용한다면, 이렇게 error를 raise 시켜주면 된다."""


# 14.4
    login을 시켜보자: login시 필요 인자: username, password  -> 이 두개를 이용해서 user를 return 해준다

    (users/views.py)
        from django.views import View
        from django.shortcuts import render, redirect, reverse
        from django.contrib.auth import authenticate, login, logout
        from . import forms
        
        class LoginView(View):
            def get(self, request):
                form = forms.LoginForm()                                    
                return render(request, "users/login.html", {"form": form})   

            def post(self,request):
                form = forms.LoginForm(request.POST)                        
                if form.is_valid():
                    email = form.cleaned_data.get("email")
                    password = form.cleaned_data.get("password")
                    user = authenticate(request, username=email, password=password)        # 여기서부터
                    if user is not None:
                        login(request, user)
                        return redirect(reverse("core:home"))                               # 여기까지가 Django, authenticate로 login 시키는 방법
                return render(request, "users/login.html", {"form": form})

    """ 이제 user가 login이 되어있으면 Login을 Logout으로 브라우저상에서 바꿔주어야 하는데,
        user가 login이 되어있는지(인증되어 있는지) 확인하는 기능이 이미 있다.
        -> is_authenticated

    (templates/partials/nav.html)
        {% if user.is_authenticated %}
            <a href="{% url 'users:logout' %}">Log Out</a>
        {% else %}
            <a href="{% url 'users:login' %}">Logint</a>
        {% endif %}

    """ user는 어디서 나타났고, 어떻게 nav.html이 user에 access 할 수 있는 것인가?
        Django는 context_processors 라는 함수를 가지고 있다. 이는 template에 정보를 추가하는 일을 한다. 그리고 이것은 그 View의 Context가 아닌 어디서든지 할 수 있다.
        자세한 사항은 django documentation 참고 - django.contrib.auth.context_processors.auth (auth 외에 django.template.context_processors.debug, i18n 등 다양) """

    logout이 브라우저에 표시되게 했으니, 이제 logout function을 만들자
    
    (users/views.py)
        def log_out(request):
            logout(request)
            return redirect(reverse("core:home"))

    (users/urls.py)
        path("logout", views.log_out, name="logout")    


# 14.5
    LoginView
    class LoginView
    Attributes: template_name / redirect_field_name / authentication_form / extra_context/ redirect_authenticated_user / success_url_allowed_hosts .... -> django document
    username 필수 요소 - 그러니 FormView를 써보자

    FormView
    form에서 인증을 할고 싶을때 유용
    Attributes : context_type / extra_context / form_class / http_method_names / initial / prefix / response_class / success_url / template_engine / template_name -> ccbv 

    (users/views.py)
        from django.views.generic import FormView

        class LoginView(FormView):
            template_name = "users/login.html"
            form_class = forms.LoginForm
            success_url = reverse("core:home")          
        # 여기까지 하면 다음과 같은 오류 발생 django.core.exceptions.ImproperlyConfigured: The included Urlconf 'config.urls'~ doens't have any patterns in it - View를 불러올 때 url이 아직 불러지지 않아서 생기는 에러
        # reverse_lazy를 사용해야 한다 : reverse와 달리, 바로 호출하는게 아니라 View가 필요로 할 때 호출

    (users/views.py)
        from django.views.generic import FormView
        from django.urls import reverse_lazy
        from django.shortcuts import render, redirect, reverse

        class LoginView(FormView):
            template_name = "users/login.html"
            form_class = forms.LoginForm
            success_url = reverse_lazy("core:home")     # def form_valid(self, form): -> If the form is valid, redirect to the supplied URL
                                                        # def form_valid(self, form):
                                                        # """If the form is valid, redirect to the supplied URL"""
                                                        #   return HttpResponseRedirect(self.get_success_url())     

    (users/views.py)
        from django.views.generic import FormView
        from django.urls import reverse_lazy
        from django.shortcuts import render, redirect, reverse

        class LoginView(FormView):
            template_name = "users/login.html"
            form_class = forms.LoginForm
            success_url = reverse_lazy("core:home")

            def form_valid(self, form):                                 # form이 유효한지 체크, email, password 등을 redirect 해줄 필요 없음, super().form_valid(form)가 호출될 때 success_url로 가고 다 다시 작동됨 - 훨씬 깔끔, get, post, if valid 등 필요 없이 쉬운 방법임
                email = form.cleaned_data.get("email")
                password = form.cleaned_data.get("password")
                user = authenticate(self.request, username=email, password=password)
                if user is not None:
                    login(self.request, user)
                return super().form_valid(form)

Signup Form
# 15.0
    FormView 이용
    
    (users/views.py)
        class SignUpview(FormView):
            pass
    
    (users/urls.py)
        path("signup", view.SignUpview.as_view(), name="signup")

    (templates/partials/nav.html)
        <a href="{% url 'users:signup' %}">Sign up</a>

    (templates/users/signup.html)
        <form method="POST" action="{% url 'users:signup' %}">
            {% csrf_token %}
            {{form.as_p}}
            <button>Sign Up</button>
        </form>
 
    (users/views.py)
        class SignUpview(FormView):
            template_name = "users/signup.html"
            form_class = forms.LoginForm
            success_url = reverse_lazy("core:home")

    (users/forms.py)
        class SignUpForm(forms.Form):
            pass

    (users/views.py)
        class SignUpview(FormView):
            template_name = "users/signup.html"
            form_class = forms.SignUpForm
            success_url = reverse_lazy("core:home")     # 여기까지 하면 brower 에러 없이 출력
     
    (users/forms.py)
        class SignUpForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)
            password1 = forms.CharField(widget=forms.PasswordInput, labe="Confirm Password")
            first_name = forms.CharField(max_length=20)
            last_name = forms.CharField(max_length=20)
    
    # 이니셜을 넣어보자 (나중에 유저들이 저장할 수 있도록 활용)
    (users/views.py)
        class SignUpview(FormView):
            template_name = "users/signup.html"
            form_class = forms.SignUpForm
            success_url = reverse_lazy("core:home")
            initial = {
                'email': 'kjhwnsghksk@naver.com',
                'first_name': "Junhwan"
                'last_name': "Kim"
            }

    # 이제 clean으로 validation을 해보자 (clean_email, cleam_password1)
    (users/forms.py)
        class SignUpForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)
            password1 = forms.CharField(widget=forms.PasswordInput, labe="Confirm Password")
            first_name = forms.CharField(max_length=20)
            last_name = forms.CharField(max_length=20)

            def clean_email(self):
                email = self.cleaned_data.get("email")
                try:
                    models.User.object.get(email=email)
                    raise forms.ValidationError("User already exists with that email)
                except models.User.DoesNotExist:
                    return email

            def clean_password1(self):                              # clean_password(self)로 하지 않는 이유: 
                password = self.cleaned_data.get("password")        # clean은 코드를 위에서 아래로 순차적으로 해서 데이터를 가져옴. 
                password1 = self.cleaned_data.get("password1")      # 따라서 clean_password로 하고 password1 = self.cleaned_data.get("password1") 을 불러온다고 하면
                                                                    # password까지만 데이터를 clean해서 가져오기 때문에, password1까지는 cleaned_data를 가져오지 않는다. 그래서 clean_password1(self) 사용
                if password != password1:
                    raise forms.ValidationError("Password confirmation does not mathch")
                else:
                    return password

# 15.1
    signup 하면 자동 login 되도록 만들어보자
    우선, form을 저장해서 계정을 생성

    (users/forms.py)
        class SignUpForm(forms.Form):
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)
            password1 = forms.CharField(widget=forms.PasswordInput, labe="Confirm Password")
            first_name = forms.CharField(max_length=20)
            last_name = forms.CharField(max_length=20)

            def clean_email(self):
                email = self.cleaned_data.get("email")
                try:
                    models.User.object.get(email=email)
                    raise forms.ValidationError("User already exists with that email)
                except models.User.DoesNotExist:
                    return email

            def clean_password1(self):                              
                password = self.cleaned_data.get("password")        
                password1 = self.cleaned_data.get("password1")      
                                                                    
                if password != password1:
                    raise forms.ValidationError("Password confirmation does not mathch")
                else:
                    return password

            def save(self):
                email = self.cleaned_data.get("email")
                password = self.cleaned_data.get("password")
                first_name = self.cleaned_data.get("first_name")
                last_name = self.cleaned_data.get("last_name")
                user = models.User.objects.create_user(email, email, password )    # models.User.objects.create()로 하지 않고 create_user를 쓰는 이유: create_user에는 password를 더 복잡하게 암호화해주는 기능이 있기 때문
                user.first_name = first_name                                       # create_user(username, email=None, password=None, **extra_fields) 따라서 왼쪽에 해준 것은 create_user(username=email, email=email, password=password)를 해준것과 같다
                user.last_name = last_name
                user.save()

    (users/views.py)
        class SignUpview(FormView):
            template_name = "users/signup.html"
            form_class = forms.SignUpForm
            success_url = reverse_lazy("core:home")
            initial = {
                'email': 'kjhwnsghksk@naver.com',
                'first_name': "Junhwan"
                'last_name': "Kim"
            }

            def form_valid(self, form):                                                 # view를 보았을 때 form이 유효하다면
                form.save()                                                             # form.save를 실행시키자 - 여기까지 아이디를 만들어서 저장하는 것까지 SignUp 기능
                email = form.cleaned_data.get("email")                                  # 여기에는 다시 login 기능 넣어서, Sign up 후에 자동 로그인 기능 넣자 : LovinView에 form_valid에 있는 내용 가져오면 됨
                password = form.cleaned_data.get("password")
                user = authenticate(self.request, username=email, password=password)
                if user is not None:
                    login(self.request, user)
                return super().form_valid(form)                                


ModelForm
# 15.2
    ModelForm에는 clean, save method가 내장되어 있고, models 들로가서 argument들을 일일이 복사해오지 않아도 된다
    (users/forms.py)
        class SignUpForm(forms.ModelForm):
            class Meta:
                model = models.User
                fields = ("first_name", "last_name", "email")
            password = forms.CharField(widget=forms.PasswordInput)                              # models.User가 password는 갖고 있지 않기 때문에 이렇게 따로 설정
            password1 = forms.CharField(widget=forms.PasswordInput, labe="Confirm Password")

            def clean_password1(self):                                                          # clean_email은 ModelForm이 해줄거라 필요없음
                password = self.cleaned_data.get("password")
                password1 = self.cleaned_data.get("password1")
                if password != password1:
                    raise forms.ValidationError("Password confirmation does not match")
                else:
                    return password                                                             # 여기까지만 해주어도 계정 생기긴 하는데, 만든 user를 admin에서 보면 username이 비어있고(fields에 username은 안정해줬음), password도 비어있다(save 해줘야 함)

            def save(self, *args, **kwargs):
                email = self.cleaned_data.get("email")
                password = self.cleaned_data.get("password")
                user = super().save(commit=False)                       # save에는 commit이라는 걸 쓸 수 있다.: commit=False -> create object, but don't save it in database - 저장되기 전에 username=email로 바꿔줄 거니까 일단 저장 안하도록 하는 것
                user.username = email
                user.set_password(password)                             # set_password : django documentation 보기
                user.save()                                             # 그냥 save()는 commit=True가 default임(database에 저장)



# 18.1
    다른 사이트를 이용해서 Log In 하는 방법의 큰 틀
    
    1. 해당 사이트로 request

    2. 인증

    3. 본 사이트로 redirect

        위는 큰 틀
    구체적으로는...
        1. code를 얻는다
        2. access_token 을 요청한다 (code를 이용해서)
        3. API 를 요청한다 (access_token을 이용해서)
            - API에 원하는 정보들 있으니 이용..?

# 20.5
    (1) html 변수를 include에서 지정해주는 방법
        include로 다른 html을 불러 올때, 불러오는 html에 변수가 있을 경우 (ex. 부르려는 html에 room이라는 변수가 있을 경우: {{room.first_photo}})
        include를 포함하는 html에서의 변수를 이용할 수 있다.
            {% for room in rooms %}
                {% include 'partials/room_card.html' with room=room %}
            {% endfor %}
        -> with room의 room은 partials/room_card.html 내에 있는 room 변수
        -> = room의 room은 for loop의 room
        -> partials/room_card.html의 room 변수를, for loop의 room 값을 넣는다는 의미    
    
    (2) array(list)의 값을 뽑아내는 방법
        photos.all()이 Array라고 하자(django에서는 주로 QuerySet)
        photo = photos.all() -> photo 는 Array
        photo = photos.all()[:1] - > photo 는 1개의 값을 갖는 Array
        photo, = photos.all()[:1] -> photo는 Array 내의 존재하는 하나의 값이 된다
        photo1, photo2, photo3 = photos.all()[:3] -> photos.all()의 첫번째 값은 photo1, 두번째 값은 photo2, 세번째 값은 photo3에 담긴다
        ** 이는 python의 특징

    (3) django에서 div 안에 image를 넣는 방법
        <div style="background-image: url({{room.first_photo}});"></div>
        (이게 맞는것 같은데 tailwindcss 일지도 모르니 테스트 필요)

    (4) 사진 찌그러지는 거는 tailwindcss 기능으로 class="flex-wrap" 해주면 되는 듯


# 20.11
    (1) {{form.email.erros}} : {{form.email}} 에 대한 에러 표시하는 것(렌더만 해주면 되는 듯)
    (2) non_field_errors
    (3) {% for field in form %} : 폼들에 대해서도 django 방식으로 for 로 렌더 할 수 있다. (공식 document에도 설명 있음)

# 20.12

    template을 view의 context처럼 사용하는 방법 설명되어 있음 : {{cta}} / {% include 'mixins/auth/form_input.html' with field=field %}

    (1) form - action : <form method="POST" action="~"</form>
        action은 다른 페이지로 보낼 때 필요, request를 같은 페이지로 보내고 싶을때는 action이 필요 없음

# 21.0
    (1) messages framework - django document
        django-admin startproject 로 시작했다면, messages framework는 이미 설치되어 있음
        import만 해주면 됨
        from django.contrib import messages

# 21.0
(django documentation - messages framework - https://docs.djangoproject.com/en/3.1/ref/contrib/messages/)
    django-admin startproject 로 시작했다면, messages framework는 이미 설치되어 있음
    import만 해주면 됨
    from django.contrib import messages

(templates/partials/messages.html)
    {% if messages %}
        <ul class="messages">
            {% for message in messages %}
                <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
            {% endfor %}
        </ul>
    {% endif %}

    message.tags 에서 tags는 아래에 있는 것들 중 debug, info, success, error 등을 가리킨다

    messages.debug(request, '%s SQL statements were executed.' % count)
    messages.info(request, 'Three credits remain in your account.')
    messages.success(request, 'Profile details updated.')
    messages.warning(request, 'Your account expires in three days.')
    messages.error(request, 'Document deleted.')

    wargning, error 등은 {{ message.tag }}의 자리로, 'Your account expires in three days.', 'Document deleted.' emddms {{ message }} 의 자리로 가게 된다


(templates/partials/messages.html)
    {% if messages %}
        <ul class="messages">
            {% for message in messages %}
                <li class="message {% if message.tags %}{{ message.tags }}{% endif %}">{{ message }}</li>
            {% endfor %}
        </ul>
    {% endif %}

    -> css를 위해 위와 같이 일부 변경


(templates/base.html)
    footer.html 위쪽에 추가
        -> {% include "partials/messages.html" %}

위까지가 part1 이라고 함
part2는 메시지를 이용


(users/views.py)
    from django. contrib import messages
    def kakao_callback(request):
        try:
            code = request.GET.get("code")
            raise KakaoException()
        except KakaoException:
            messages.error(request, "Something went wrong")
            return redirect(Reverse("users:login"))
        
    -> 위처럼 작성해서 에러 코드 확인 해볼 것임
    -> 오류가 나도록 아이디 등 설정해서 카카오로그인 해보면 웹브라우저에 오류 뜨는거 볼 수 있음


(webbrowser)
    F12 눌러서 개발자 모드 보면
    <li class="message error"> 확인 가능



# 21.1
(users/views.py)
    from django. contrib import messages
    def kakao_callback(request):
        try:
            code = request.GET.get("code")    
        
        if error is not None:
            raise KakaoException("Can't get authorization code.")           # 메시지와 에러처리를 같이 하는 것
        
        if email is None:
            raise KakaoException("Please also give me your email.")

        if user.login_method != models.User.LOGIN_KAKAO:
            raise KakaoException(f"Please log in with: {user.login_method}")
        
            login(request, user)
            messages.success(request, f"Welcome back {user.first_name}")

        except KakaoException as e:
            messages.error(request, "e")
            return redirect(Reverse("users:login"))
    -> 카카오로 로그인 했던 것을 admin에서 github로 바꿔주고 kakao 로그인 시도해보면 확인 가능
    -> 깃허브도 똑같이 적용해주기 


(templates/base.html)
메시지 뜰 위치 변경



# 21.2
messages에 css 입히기
    애니메이션 입히기
    @keyframes messageFadeIn 5s ease-in-out forwards{
        0% {
            opacity: 0;
            transform: translateY(-50px);
        }
        5% {
            opacity: 1;
            transform: translateY(50px);
        }
        95% {
            opacity: 1;
            transform: translateY(50px);
        }
        100% {
            opacity: 0;
            transform: translateY(-50px);
        }
    }

message 안사라져서 로그인 등 클릭 방해 받을때 css에 z-10 등(html에서 class="z-10"), z index 값 설정하기



# 21.3
(templates/partials/nav.html)
<ul class="flex items-center text-sm font-medium h-full">
    {% if user.is_authenticated %}
        <li class="nav_link"><a href="{% url "users:profile" %}">Profile</a></li>
        <li class="nav_link"><a href="{% url "users:logout" %}">Log out</a></li>
    {% else %}
        <li class="nav_link"><a href="{% url "users:login" %}">Log in</a></li>
        <li class="nav_link"><a href="{% url "users:signup" %}">Sign up</a></li>
    {% endif %}
</ul>


(users/views.py)
from django.views.generic import DetailView
class UserProfileView(DetailView):
    pass


(users/urls.py)
    path("<int:pk>", views.UserProfileView.as_view(), name="profile")


(templates/partials/nav.html)
<ul class="flex items-center text-sm font-medium h-full">
    {% if user.is_authenticated %}
        <li class="nav_link"><a href="{% url "users:profile" %}">Profile</a></li>  # int:pk에 해당하는 argument를 줘야 한다.
        <li class="nav_link"><a href="{% url "users:logout" %}">Log out</a></li>
</ul>

-> 장고 안의 모델들은 get_absolute_url이라는 메소드를 가지고 있음: users 안에서 메소드 만들어보자
(users/models.py/User)
from django.shortcuts import reverse
def get_absolute_url(self):
    return reverse("users:profile", kwargs={'pk':self.pk})  # path("<int:pk>", views.UserProfileView.as_view(), name="profile") 를 보고 비교해서 왼쪽과 같이 작성(app_name=users, name="profile", <int:pk>)


(templates/partials/nav.html)
<ul class="flex items-center text-sm font-medium h-full">
    {% if user.is_authenticated %}
        <li class="nav_link"><a href="{{user.get_absolute_url}}">Profile</a></li>  # int:pk에 해당하는 argument를 줘야 한다.
        <li class="nav_link"><a href="{% url "users:logout" %}">Log out</a></li>
</ul>

get_absoulte_url로 해주면 admin에서 vie on site 볼 수 있음
* admin 패널에서 object(객체)들을 보고 싶다면 get_absolute_url이 매우 유용


(templates/partials/nav.html)
<ul class="flex items-center text-sm font-medium h-full">
    {% if user.is_authenticated %}
        <li class="nav_link"><a href="{% url "users:profile" user.pk %}">Profile</a></li> 
        <li class="nav_link"><a href="{% url "users:logout" %}">Log out</a></li>
</ul>
    -> get_absolute_url 안쓰고 user.pk를 argument로 줘도 됨(view on site는 없어짐)


(users/views.py)
class UserProfileView(DetailView):

    model = models.User


(templates/users/user_detai.html)
    {{user.first_name}}

-> 해당 방에 a태그를 달고 profile을 보면 그 방의 profile이 나온다.
 그리고 내 profile을 보기 위해 상단의 profile을 들어가면, 내 profile이 아니라 좀 전 방의 주인의 profile이 나온다.
 홈으로 갔다가 내 profile로 이동하면 내 profile이 나온다 (user가 계속 변경되는 상황임)

-> UserProfileView가 user 값들을 바꾸고 있기 때문임

-> DetailView 내부 보기 -> BaseDetailView 내부 보기 -> SingleObjectMixin 내부 보기
    -> context_object_name = None 볼 수 있음 : 이 코드는 로그인 했던 유저가 아니라, 뷰에서 찾았던 유저 객체(object)를 가르키는 방법을 바꿀수 있도록 해준다.


(users/views.py)
class UserProfileView(DeatilView):

    model = models.User
    context_object_name = 'user_obj'


(templates/users/user_detai.html)
    {{user_obj.first_name}}

-> 이렇게 해주면 위 문제 해결됨



# 21.4
(users/views.py)
class UserProfileView(DeatilView):

    model = models.User
    context_object_name = 'user_obj'

    def get_context_data(self, **kwargs랑):             # 템플릿 안에 더 많은 context를 사용할 수 있게 해준다
        context = super().get_context_data(**kwagrs)    # get_context_data 안에는 super를 이용해야 한다. why? get_context_data는 기본적으로 user_obj를 주기 때문이라고 함
        context["hello"] = "Hello!"
        return context                                  -> 뷰의 context data를 확장시킨 것임


(templates/users/user_detai.html)
    {{user_obj.first_name}}
    {{hello}}                                       -> 브라우저에서 확인: 여전히 user object인 context를 가지고 있고, 또한 다른 context는 hello를 가지고 있기도 함...이라고 표현

-> 테스트 해본 거고, 본격적으로 작성

(templates/users/user_detai.html)
    {% if user_obj.avatar %}
        <img src="{{user_obj.avatar.url}}" />
    {% else %}
        <div>
            <span>{{user_obj.first_name|first}}</span>      # |first : - 첫 글자만 보여주는 필터
        </div>
    {% endif %}    
    {{user_obj.first_name}}
    {{user.bio}}



# 21.6

(users.views.py)
from django.views.generic import UpdateView
class UpdateProfileView(UpdateView):
    pass


(users/urls.py)
    path("update-profile/", views.UpdateProfileView.as_view(), name="update")


(templates/users/user_detail.html)
    {% if user == user_obj %}
        <a href="{% url 'users:update' %}">Edit Profile</a>
    {% endif %}


(ccbv.co.uk/projects/Django/3.0/django.views.generic.edit/UpdateView/)
update의 url이 pk를 갖고 있지 않아서 (좋지 않기 때문에..)
get_object라는 메소드를 이용
get_object는 우리가 수정하기를 원하는 객체(object)를 반환해준다


(users.views.py)
from django.views.generic import UpdateView
class UpdateProfileView(UpdateView):
    
        model = models.User
        template_name = "users/update-profile.html"
        fields = (                           # forms.py 처럼 시작하고 있음. 이게 UpdateView의 장점: 뷰 안에 폼뷰가 있고, 그 폼 뷰 안에 모델 폼이 있기 때문이라 함
            "first_name"
            "last_name",
            "avatar",
            "gender",
            "bio",
            "birthdate",
            "language",
            "currency",
        )
        
        def get_object(self, queryset=None):            # queryset: 바로 위에서 이용한 model = models.User 를 가리킨다..?
            return self.request.user


(templates/users/update-profile.html)
    {% include 'mixins/auth/auth_form.html' with form=form cta="Update Profile" %}

UpdateView를 사용해서 하면, 수정 후 별도 경로 지정을 안해줬는데도 get_absolute_url로 이동한다는 점이 매우 편리



# 21.7

Edit Profile에서 사진을 올려주면, 제대로 작동하지 않는다. form의 인코딩 타입 문제인데, form의 인코딩 타입을 바꿔주자

(templates/mixins/auth/auth_form.html)
<form method="POST" enctype="multipart/form-data>
</form>
-> form은 text/plain, multipart/form-data, application 같은 것을 가질 수 있는 enctype이 있다. 그중 multipart/form-data를 사용하자
-> form에서 enctype을 설정해야 banckend에서 보낸 파일을 받을 수 있다


password change / change password
(users/views.py) / (ccbv)
from django.contrib.auth.views import PasswordChangeView
class UpdatePasswordView(PasswordChangeView):
    pass


(users/urls.py)
    path("update-password/", views.UpdatePasswordView.as_view(), name="password")



(templates/users/update-password.html)
    <a href="{% url 'users:password' %}" >
->(update-profile.html의 양식을 가져오자)


(users/views.py) / (ccbv)
from django.contrib.auth.views import PasswordChangeView
class UpdatePasswordView(PasswordChangeView):
    
    template_name = "users/update-password.html"
-> password 변경할 수 있는 form 얻게 된다


카카오로 로그인 했을때 또 로그인 하는 폼이 안나오도록 설정 해줘야 한다
(templates/users/update-password.html)

    {{object.login_method}}                         # object는 UpdatePasswordView가 다루는 객체를 가리킨다 (user, 페이지에서 출력시 email이 나온다(아마 username?))

    {% if object.login_method == "email" %}
        <a href="{% url 'users:password' %}" >
    {% endif %}
    


# 21.8

(templates/mixins/auth/form_input.html)
    {{field.label}} 하면 placeholder 대신에 쓸만한 label이 표기 된다


edit profile 진행중:
    UpdateView를 쓰면서 placeholder를 쓰기 위해서,
    form_class를 쓸 수 있다. 또한 def get_form 을 사용할 수 있는데, def get_form을 사용해보자


(users/views.py/UpdateProfileView)
    def get_form(self, form_class=None):
        form = super().get_form(form_class=form_class)
        form.fields['birthdate'].widget.attrs = {"placeholder":"Birthdate"}
        return form

        * UpdateView는 템플릿을 렌더링 할수도 있고, form 안의 데이터를 넣을 수도 있고, form을 검증할 수도 있고, form을 생성할 수도 있어서 좋으나
            통제력이 떨어지는 단점이 있다
            -> 최고의 밸런스는 UpdateView를 사용하고 form_class를 사용해서 나만의 form을 만드는 것
        * 위 기능은 UpdatePasswordView에도 필요


(users/views.py)
class UpdatePasswordView(PasswordChangeView):
    def get_form(self, form_class=None):
        form = super().get_form(form_class=form_class)
        return form
    -> brower에서 F12로 확인해서 name 확인해보면, old_password, new_password1, new_password2 로 이름이 들어가 있음을 확인할 수 있다. 이를 가지고 이름 변경

    def get_form(self, form_class=None):
        form = super().get_form(form_class=form_class)
        form.fields['old_password'].widget.attrs = {"placeholder":"Current Password"}
        form.fields['new_password1'].widget.attrs = {"placeholder":"New Password"}
        form.fields['new_password2'].widget.attrs = {"placeholder":"Confirm New Password"}
        return form



# 21.9

(users/views.py)

class UpdatePasswordView(PasswordChangeView):

    template_name = "users/update-profile.html"

    def get_form(self, form_class=None):
        form = super().get_form(form_class=form_class)
        form.fields['old_password'].widget.attrs = {"placeholder":"Current Password"}
        form.fields['new_password1'].widget.attrs = {"placeholder":"New Password"}
        form.fields['new_password2'].widget.attrs = {"placeholder":"Confirm New Password"}
        return form

    def get_success_url(self):
        return self.request.user.get_absoulte_url()



(users/views.py)
from django.contrib.messages.views import SuccessMessageMixin

class UpdateProfileView(SuccessMessageMixin, UpdateView):

    model = models.User
    template_name = "users/update-profile.html"
    fields = (                           
        "first_name"
        "last_name",
        "avatar",
        "gender",
        "bio",
        "birthdate",
        "language",
        "currency",
    )
    
    success_message = "Profile Updated"

    def get_object(self, queryset=None):
        return self.request.user


유저들이 로그인 안 한 상태에서, 링크를 안타고 url을 통해서 비밀번호 변경 하는 페이지로 가거나,
로그인이 되어있는 상태에서 url로 또 로그인 하는 페이지로 이동하는 것등을 막기 위해서 mixin을 이용해보자
(users/mixins.py)
from django.contrib.auth.mixins import UserPassesTestMixin

class LoggedOutOnlyView(UserPassesTestMixin, View):
    def test_func(self):
        return not self.request.user.is_authenticated

-> 기본적으로 이런 것들이 하는 것은, 만약 test_func이 True 값을 return 하면 다음으로 넘어갈 수 있다는 것을 의미
    (함수를 바로 안쓰고 class 안에 정의한 이유: UserPassesTestMixin이 class based view에서 사용되어져야 하기 때문인것 같음)
-> UserPassesTestMixin은 AccessMixin 에서 왔음. AccessMixin을 또 보면 handle_no_permission(), permission_denied_message 등 이 있다

(users/mixins.py)
from django.shortcuts import redirect, reverse
from django.contrib.auth.mixins import UserPassesTestMixin

class LoggedOutOnlyView(UserPassesTestMixin, View):

    permission_denied_message = "Page not found"

    def test_func(self):
        return not self.request.user.is_authenticated
    def handle_no_permission(self):
        return redirect("core:home")                         # redirect(reverse("core:home")) 도 되는 듯... 둘 다 해보기


(users/views.py)

로그아웃한 사람만 볼 수 있어야 하므로, LoginView와 SignUpView에 LoggedOutOnlyView 추가해주어야 한다

from . import mixins

class LoginView(mixins.LoggedOutOnlyView, FormView):

class SignUpView(mixins.LoggedOutOnlyView, FormView):

-> 로그인 한 상태에서 127.0.0.1:8000/user/login 하면 안들어가지고 redirect 되어야 한다.



# 21.10

(users/mixins.py)
from django.urls import reverse_lazy
from django.shortcuts import redirect, reverse
from django.contrib.auth.mixins import UserPassesTestMixin, LoginRequiredMixin

class LoggedOutOnlyView(UserPassesTestMixin, View):

    def test_func(self):
        return not self.request.user.is_authenticated
    def handle_no_permission(self):
        messages.error(self.request, "Can't go there")          # permission_denied_message="Page not found" 작동 안했어서 이렇게 다시 한 듯
        return redirect("core:home")   

class LoggedInOnlyView(LoginRequiredMixin):

    login_url = reverse_lazy("users:login")                     # LoginRequiredMixin은 test_func을 갖기 때문에 UserPassesTestMixin과 다르게 def test_func 안해준다고 한듯..


class UpdateProfileView(mixins.LoggedInOnlyView 추가)
class UpdatePasswordView(mixins.LoggedInOnlyView 추가)

이렇게 해주고 log out 상태에서 127.0.0.1:8000/users/update-profile/로 다시 이동을 해주면
127.0.0.1:8000/users/login/?next=/users/update-profile/ 이라는 url과 함께 login page로 이동하게 된다
일단 설정은 login 하면 홈으로 이동하겠지만, def get_success_url 이용해서 next로 주어진 곳으로 이동할 수 있게 된다.


(users/views.py/LoginView)
class LoginView(mixins.LoggedOutOnlyView, FomrView):
    template_name = "users/login.html"
    form_class = forms.LoginForm
                                                    # success_url = reverse_lazy("core:home") 삭제
    def form_valid
        ~~

    def get_success_url(self):
        next_arg = self.request.GET.get("next")
        if next_arg is not None:
            return next_arg
        else:
            return reverse("core:home")


* 카카오로 로그인한 유저가 password change 페이지로 가는 것을 막도록 mixin을 이용해보자
(users/mixins.py)
class EmailLoginOnlyView(UserPassesTestMixin):
    def test_func(self):
        return self.request.user.login_method == "email"
    def handle_no_permission(self):
        messages.error(self.request, "Can't go there")
        return redirect("core:home")

    
(users/views.py/UpdatePasswordView)
class UpdatePasswordView(mixins.EmailLoginOnlyView 추가)        # 순서 정해줘야 된다고 함 - mixins.LoggedInOnlyView 먼저, 그 다음에 mixins.EmailLoginOnlyView



# 21.11

그 외...
비밀번호 등 잊었을 때 reset 할 수 있는 View가 있는 듯
Authentication Views
    urlpatterns = [path('accounts/', include('django.contrib.auth.urls')),] 를 해주면 아래와 같은 url이 딸려온다.

    accounts/login/                     [name='login']
    accounts/logout/                    [name='logout']
    accounts/password_change/           [name='password_change']
    accounts/password_change/done/      [name='password_change_done']
    accounts/password_reset/            [name='password_reset']
    accounts/password_reset/done        [name='password_reset_done']
    accounts/reset/<uidb64>/<token>/    [name='password_reset_confirm']
    accounts/reset/done/                [name='password_reset_complete']



# 22.0

(rooms/models.py/Room)
class Room():
    def get_next_four_photos(self):
        photos = self.photos.all()[1:5]



# 22.2 
복수/단수 filter : pluralize
    {{room.beds}} bed{{room.beds|pluralize}} {{room.beds}}는 숫자, {{room.beds|pluralize}}는 room.beds가 단수면 아무것도 없고, room.beds가 복수면 s 반환해주는 듯

# 22.3
<div class="{{h_and_w|default: 'h-20 w-20}}"
    <span class="{text|default:'text-3xl'}}">
-> {% include "mixins/user_avatar.html" with user=review.user h_and_w='w-10 h-10' text='1' %}  
이런식으로 필터 사용 가능하니 참고
{{reiew.created|date:'F Y'}}



# 23.0

(templates/rooms/room_detail.html)
    <a href="#">Edit Room</a>


(rooms/urls.py)
path("<int:pk>", views.RoomDetail.as_view(), name="detail")
-> path("<int:pk>/edit/", views.EditRoomView.as_view(), name="edit")        # UpdateView는 default로 url에 있는 pk를 받는다


(rooms/views.py)
class EditRoomView(UpdateView):                                             # UpdateView는 default로 url에 있는 pk를 받는다
    model = models.Room


(templates/rooms/room_detail.html)
    {% if room.host == user %}
    <a href="{% url 'rooms:edit' room.pk %}">Edit Room</a>
    {% endif %}

(rooms/views.py)
class EditRoomView(UpdateView):
    model = models.Room
    fields = (
        'name',
        'description',
        'city',
        'price',
        'address'
        ...
    )


(templates/rooms/room_edit.html)
    update_profile.html 양식 가져오기


(rooms/views.py)
class EditRoomView(UpdateView):
    model = models.Room
    template_name = "rooms/room_edit.html"
    fields = (
        'name',
        'description',
        'city',
        'price',
        'address'
        ...
    )


(templates/mixins/room/room_form.html)
    templates/mixins/auth/auth_form.html 양식을  가져와서 수정

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}

    {% if form.non_field_errors %}
        {% for error in form.non_field_erros %}
            <span>{{error}}</span>
        {% endfor %}
    {% endif %}

    {% for field in form %}
        {% include 'mixins/room/room_input.html' with field=field %}
    {% endfor %}

    <button>{{cta}}</button>
</form>


(templates/mixins/room/room_input.html)
    templates/mixins/auth/form_input.html 양식을  가져와서 수정

<div class="{% if field.errors %}has_error{% endif%}">
    {{field.label}}
    {{field}}
    {% if field.erros %}
        {% for error in field.errors %}
            <span>{{error}}</span>
        {% endfor %}
    {% endif %}
</div>


(templates/rooms/room_edit.html)
    {% include 'mixins/room/room_form.html' with form=form cta="Update room" %} 으로 수정



----> UpdateView를 사용해서 form을 만들필요도 없었고, form을 인증하는 과정도 필요 없었음 / 보안문제가 있음 : 링크 없이 url 타고 남의 room 수정하는 것
-> mixin 이용

# 23.1

(rooms/views.py/EditRoomView)
from django.http import Http404
from users import mixins as user_mixins
class EditRoomView(user_mixins.LoggedInOnlyView, UpdateView):           # UpdateView는 default로 url에 있는 pk를 받는다고 했었음 / 단점은 소유권에 대한 인증이 안된다
                                                                        # get_object를 이용해보자 : url로부터 pk를 받고, 만약 pk is not None이면 queryset(models.Room)에서 filter가 된다
                                                                        # queryset에서 모델(여기선 Room)을 가져오려는데 없으면 raise Http404 해주자 / user가 방의 주인이 맞으면 object(Room)을 return 해주고
    model = models.Room
    template_name = "rooms/room_edit.html"
    fields = (
        "name",
        ...
        "host",
    )                      

    def get_object(self, queryset=None):                                # queryset: 바로 위에서 이용한 model = models.User 를 가리킨다..?
        room = super().get_object(queryset=queryset)
        if room.host.pk != self.request.user.pk:                        # print(room.bost.pk, self.request.user.pk) -> 비교해보면 다른 걸 확인 할 수 있다
            raise Http404()
        return room



-이제 사진 업로드를 해보자

class RoomPhotosView(user_mixins.LoggedInOnlyView, DetailView):       
    
    model = models.Room
    template_name = "room_photos.html"

    def get_object(self, queryset=None):
        room = super().get_object(queryset=queryset)
        if room.host.pk != self.request.user.pk:                        
            raise Http404()
        return roomrgs):


(rooms/urls.py)
    path("<int:pk/photos", views.RoomPhotosView.as_view(), name="photos")


(templates/rooms/room_edit.html)
  
        <a href="{% url 'rooms:photos' room.pk %}" >Edit Photos</a>


(templates/rooms/room_photos.html 생성)

    <div>
        {% for photo in room.photos.all %}
            <div>
            <img src="{{photo.file.url}}" />
            <span>{{photo.caption}}</span>
            </div>
        {% endfor %}
    </div>



# 23.3
Delete Photo

(rooms/views.py)
from django.contrib.auth.decorators import login_required

@login_required                                                 #login_required() : If the user isn't logged in, redirect to settings.LOGIN_URL
def delete_photo(request):


(config/settings.py)

# Authentication
LOGIN_URL = "/users/login/"


(rooms/views.py)
from django.contrib.auth.decorators import login_required

@login_required                                                 
def delete_photo(request):
    pass


(rooms/urls.py)
path("<int:room_pk>/photos/<int:photo_pk>/delete/", views.delete_photo, name="delete-photo")


(rooms/views.py)
from django.shortcuts import redirect, reverse
from django.contrib.auth.decorators import login_required
from djkango.contrib import messages

@login_required                                                 
def delete_photo(request, room_pk, photo_pk):
    user = request.user
    try:
        room = models.Room.objects.get(pk=room_pk)
        if room.host.pk != user.pk:
            messages.error(request, "Can't delete that photo")
        else:
            models.Photo.objects.filter(pk=photo_pk).delete()               # 또는 photo = models.Photo / photo.delete() 해도 된다고 함
            messages.success(request, "Photo Deleted")
        return redirect(reverse("rooms:photos", kwargs={"pk": room_pk}))
    except models.Room.DoesNotExist:
        return redirect(reverse("core:home"))
    

(templates/rooms/room_photos.html)

    <div>
        {% for photo in room.photos.all %}
            <div>
            <img src="{{photo.file.url}}" />
            <span>{{photo.caption}}</span>
            </div>
            <div>
                <a href="#">Edit</a>
                <a href="{% url 'rooms:delete-photo' room.pk photo.pk %}">Delete</a>
        {% endfor %}
    </div>


(rooms/views.py)
class EditPhotoView(user_mixins.LoggedInOnlyView, UpdateView):

    model = models.Photo                                                                        # 이걸 넣어주지 않으면 super()가 room을 주지 않을 것이라 함
    template_name = "rooms/photo_edit.html"
    fields = ("caption",)


(templates/rooms/photo_edit.html)   : room_edit.html에서 양식 가져오자


(rooms/urls.py)
    path("<int:room_pk>/photos/<int:photo_pk>/edit/", views.EditPhotoView.as_view(), name="edit-photo")


(templates/rooms/room_photos.html)

    <div>
        {% for photo in room.photos.all %}
            <div>
            <img src="{{photo.file.url}}" />
            <span>{{photo.caption}}</span>
            </div>
            <div>
                <a href="{% url 'rooms:edit-photo' room.pk photo.pk %}">Edit</a>
                <a href="{% url 'rooms:delete-photo' room.pk photo.pk %}">Delete</a>
        {% endfor %}
    </div>


(rooms/views.py)
from django.urls import reverse_lazy
from django.contrib.messages.views import SuccessMessageMixin

class EditPhotoView(user_mixins.LoggedInOnlyView, UpdateView):

    model = models.Photo                                                                        
    template_name = "rooms/photo_edit.html"
    pk_url_kwarg = "photo_pk"                       # UpdateView는 pk로만 되어있어야 찾을 수 있다(pk_url_kwarg의 default가 'pk'로만 되어있어서). 따라서 url에서 pk로 지정해주지 않았다면 naming 변경해줘야 함
    fields = ("caption",)
    
    def get_success_url(self):                      # request url에 대해서 access가 없어서 success_url을 method로 (즉, def get_success_url) 바꿔야 한다고 설명함.... 로직을 구현하려면 method가 필요하다고 해서..
        room_pk = self.kwargs.get("room_pk")
        return reverse("rooms.photos", kwargs={'pk': room_pk})


-- message를 추가해보자
(rooms/views.py)
from django.urls import reverse_lazy - 삭제
from django.contrib.messages.views import SuccessMessageMixin

class EditPhotoView(user_mixins.LoggedInOnlyView, SuccessMessageMixin,UpdateView):

    model = models.Photo                                                                        
    template_name = "rooms/photo_edit.html"
    pk_url_kwarg = "photo_pk"                       # UpdateView는 pk로만 되어있어야 찾을 수 있다(pk_url_kwarg의 default가 'pk'로만 되어있어서). 따라서 url에서 pk로 지정해주지 않았다면 naming 변경해줘야 함
    success_message = "Photo Updated"
    fields = ("caption",)
    

    def get_success_url(self):                      # request url에 대해서 access가 없어서 success_url을 method로 (즉, def get_success_url) 바꿔야 한다고 설명함.... 로직을 구현하려면 method가 필요하다고 해서..
        room_pk = self.kwargs.get("room_pk")
        return reverse("rooms.photos", kwargs={'pk': room_pk})


(templates/rooms/room_photos.html)
    <div>
        <a href="{{room.get_absolute_url}}edit">Back to edit room</a>
    </div>


# 23.5

(templates/rooms/room_photos.html)
    <a href="#">Upload Photo</a>


(templates/rooms/photo_create.html 생성)


(rooms/views.py)
from django.views.generic import FormView
class AddPhotoView(user_mixins.LoggedInOnlyView, SuccessMessageMixin, FormView):

    model = models.Photo
    template_name = "rooms/photo_create.html"
    fields = ("caption", "file")


(rooms/urls.py)
    path("<int:pk>/photos/add", views.AddPhotoView , name="add-photo")


(templates/rooms/room_photos.html)
    <a href="{% url 'rooms:add-photo' room.pk %}">Upload Photo</a>                  # 아직 저장이 안됨. photo는 room(rooms_photo.room_id)이 필요하기 때문 / form_class 활용 할 것임 / 사진을 저장해야 이용 가능한데, forms.py에 form을 추가 해줘야 한다...?


(templates/rooms/photo_create.html 생성)


(rooms/forms.py)
class CreatePhotoForm(forms.ModelForm):
    class Meta:
        model = models.Photo
        fields = ("caption", "file")
        form_class = forms.CreatePhotoForm

    def save(self, *args, **kwargs):                           
        photo = super().save(commit=False)


(rooms/views.py)
from django.views.generic import FormView
class AddPhotoView(user_mixins.LoggedInOnlyView, SuccessMessageMixin, FormView):

    model = models.Photo
    template_name = "rooms/photo_create.html"
    fields = ("caption", "file")
    form_class = forms.CreatePhotoForm

    def form_valid(self, form):
        pk = self.kwargs.get('pk')
        form.save(pk)


(rooms/forms.py)
class CreatePhotoForm(forms.ModelForm):
    class Meta:
        model = models.Photo
        fields = ("caption", "file")
        form_class = forms.CreatePhotoForm
 
    def save(self, pk, *args, **kwargs):                          
        photo = super().save(commit=False)

                                                   


(rooms/views.py)
from django.views.generic import FormView
class AddPhotoView(user_mixins.LoggedInOnlyView, SuccessMessageMixin, FormView):

    model = models.Photo
    template_name = "rooms/photo_create.html"
    fields = ("caption", "file")
    form_class = forms.CreatePhotoForm

    def form_valid(self, form):                                                   # form_valid 는 언제나 http response를 return 하는 것을 기억하자
        pk = self.kwargs.get('pk')
        form.save(pk)


(rooms/forms.py)
class CreatePhotoForm(forms.ModelForm):
    class Meta:
        model = models.Photo
        fields = ("caption", "file")
        form_class = forms.CreatePhotoForm
 
    def save(self, pk, *args, **kwargs):                          
        photo = super().save(commit=False)
        room = models.Room.objects.get(pk=pk)
        photo.room = room
        photo.save()


(rooms/views.py)
from django.views.generic import FormView
class AddPhotoView(user_mixins.LoggedInOnlyView, FormView):

    model = models.Photo
    template_name = "rooms/photo_create.html"
    fields = ("caption", "file")
    form_class = forms.CreatePhotoForm
    

    def form_valid(self, form):                                                             #SuccessMessageMixin을 쓰면 def form_valid를 쓸수 없다고 함...
        pk = self.kwargs.get('pk')
        form.save(pk)
        messages.success(self.request, "Photo Uploaded")
        return redirect(reverse("rooms:photos", kwargs={"pk": pk}))



# 23.7

database에 저장될 필요가 없는 것들(guest mode, host mode 등)은, session 으로 처리 가능

(users/views.py)
from django.contrib.auth.decorators import login_required

@login_required
def start_hosting(request):                         
    request.session["is_hosting"] = True                # session 생성    
    return redirect(reverse("core:home"))

@login_required
def stop_hosting(request):                              # session 삭제 - 방법 2가지 소개 (1) del request.session[]  (2) pop(key, default=__not_given) : request.session.pop("is_hosting", True)
    try:
        del request.session["is_hosting"]
    except KeyError:
        pass
    return redirect(reverse("core:home"))


(users/urls.py)
    path("start-hosting/", views, name="")
    path("stop-hosting/", views, name="")

    --- 이렇게 하려다 생성/삭제를 swith 하는걸로 변경


(users/views.py)
from django.contrib.auth.decorators import login_required

@login_require
def switch_hosting(request):
    try:
        del request.session["is_hosting"]               # session 삭제 - 방법 2가지 소개 (1) del request.session[]  (2) pop(key, default=__not_given) : request.session.pop("is_hosting", True)
    except KeyError:
        request.session["is_hosting"] = True            # session 생성    
    return redirect(reverse("core:home"))


(users/urls.py)
    path("switch-hosting/", views.switch_hosting, name="switch-hosting")


(templates/partials/nav.html)
<ul>
    {% if user.is_authenticated %}
        <li>
            <a href="{% url 'users:switch-hosting' %}">
                {% if request.session.is_hosting %}
                    Stop hosting
                {% else %}
                    Start hosting
                {% endif %}
            </a>
        </li>
        {% if request.session.is_hosting %}
            <li><a href="{{user.get_absolute_url}}">Create Room</a></li>
        {% endif %}
    
    {% else %}

    {% endif %}
</ul>


(rooms/views.py)
class CreateRoomView(user_mixins.LoggedInOnlyView, FormView):            # CreateView를 써도 좋지만, user와 함께 room을 save 해야 하기 때문에 (form을 intercept 한다 표현) FormView 사용
    pass


(rooms/forms.py)
class CreateRoomForm(forms.ModelForm):
    class Meta:
        model = models.Room
        fields = (
            "name",
            "descriptipon",
            ...
        )


(rooms/views.py)
class CreateRoomView(user_mixins.LoggedInOnlyView, FormView):            
    
    form_class = forms.CreateRoomForm
    template_name = "rooms/room_create.html"


(templates/rooms/room_create.html 생성 - room_edit 양식)


(rooms/urls.py)
    path("create/", views.CreateRoomView.as_view(), name="create")


(templates/partials/nav.html)
<ul>
    {% if user.is_authenticated %}
        <li>
            <a href="{% url 'users:switch-hosting' %}">
                {% if request.session.is_hosting %}
                    Stop hosting
                {% else %}
                    Start hosting
                {% endif %}
            </a>
        </li>
        {% if request.session.is_hosting %}
            <li><a href="{% url 'rooms:create' %}">Create Room</a></li>
        {% endif %}
    
    {% else %}

    {% endif %}
</ul>


(rooms/forms.py)
class CreateRoomForm(forms.ModelForm):
    class Meta:
        model = models.Room
        fields = (
            "name",
            "descriptipon",
            ...
        )

    def save(self, user, *args, **kwargs):
        room = super().save(commit=False)


(rooms/views.py)
class CreateRoomView(user_mixins.LoggedInOnlyView, FormView):            
    
    form_class = forms.CreateRoomForm
    template_name = "rooms/room_create.html"

    def form_valid(self, form):
        form.save(self.request.user)
        message.success(self.request, "Room Created")


(rooms/forms.py)
class CreateRoomForm(forms.ModelForm):
    class Meta:
        model = models.Room
        fields = (
            "name",
            "descriptipon",
            ...
        )

    def save(self, *args, **kwargs):
        room = super().save(commit=False)
        return room


(rooms/views.py)
class CreateRoomView(user_mixins.LoggedInOnlyView, FormView):            
    
    form_class = forms.CreateRoomForm
    template_name = "rooms/room_create.html"

    def form_valid(self, form):
        room = form.save()
        room.host = self.request.user
        room.save() 
        message.success(self.request, "Room Created")                       # form의 room을 가지고 와서 .... # 이것들이 되는 이유는 commit=False 이기 때문이라 함
        return redirect(reverse("rooms.detail"), kwargs={"pk": room.pk})    # super().save()에 commit=False를 해주면 object를 생성하지만 database에는 안 넣음
                                                                            # 여기서 우리가 한 것은 model form에 정보를 보낸 예시라고 할 수 있다.
                                                                            # 아직 생성되지 않은 virtual room을 밖에서(rooms/forms.py/CreateRoomForm) 가져와서 form_valid(views.py/CreateRoomView에 있는)에 넘겨주고 room.save를 하는 것
                                                                            # 이렇게 해준 이유: 새로 생성된 room의 detail로 return redirect(reverse("rooms.detail"))을 해주고 싶었음
                                                                            # rooms.detail은 pk가 필요하기 때문에 이 room을 원했음(form_valid에서 지정해준 room 가르킴) -> 새롭게 생성도니 room으로 redirect를 원했음


-> 이렇게 해주고 방을 만들어주면, first_photo 파일이 존재하지 않아서 에러가 남
(rooms/models.py/Room)
    def first_photo(self):
        try:
            photo, = self.photos.all()[:1]
            return photo.file.url
        except ValueError:
            return None
-> many-tomany data(amenities 등)가 저장이 안되었음



# 23.9
    f.save_m2m() 
    ->commit=False를 사용한 경우, save_m2m은 model을 database에 저장한 후에(.save()) 사용해주어야 함 
    -> model을 database에 저장하지 않았다면 save_m2m을 호출할 수 없음


(rooms/views.py)
class CreateRoomView(user_mixins.LoggedInOnlyView, FormView):            
    
    form_class = forms.CreateRoomForm
    template_name = "rooms/room_create.html"

    def form_valid(self, form):
        room = form.save()
        room.host = self.request.user
        room.save() 
        form.save_m2m()
        message.success(self.request, "Room Created")                      
        return redirect(reverse("rooms.detail"), kwargs={"pk": room.pk}) 



# 24.0
달력 만들기 : 파일 이름 지을 때 calendar로 짓지 말자. calendar를 import 할거기 때문에

(rooms/models.py)
def get_calendars(self):
    return False                


(cal.py)
import calendar

class Calendar():
    def __init__(self, year, month):
        self.year = year
        self.month = month
        self.day_names = ("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
        self.month_names = (
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        )
    
    def get_month(self):
        return self.months[self.month - 1]


(rooms/models.py)
from cal import Calendar

def get_calendars(self):
    this_month = Calendar(2021, 2)
    next_month = Calendar(2021, 3)
    return False


(templates/rooms/room_detail.html)
    {% if not request.session.is_hosting %}
        {{room.get_calendars}}
    {% endif %}


(cal.py)
import calendar

class Calendar(calendar.Calendar):
    def __init__(self, year, month):
        super().__init__(firstweekday=6)
        self.year = year
        self.month = month
        self.day_names = ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
        self.month_names = (
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        )
    
    def get_days(self):
        weeks = self.monthdays2calendar(self.year, self.month)
        days = []
        for wee in weeks:
            for day, _ in week:                                    # 어떤 변수를 무시할 때 _ 로만 표현 (weeks는 2개의 인자로 된 tuple이고, 그 중 우린 뒤에 오는 인자를 무시하고 앞 인자만 다룰 예정)
                days.append(day)
        return days

    def get_month(self):
        return self.months[self.month - 1]


(rooms/models.py)
from cal import Calendar

def get_calendars(self):
    this_month = Calendar(2021, 2)
    next_month = Calendar(2021, 3)
    return [this_month, next_month]


(templates/rooms/room_detail.html)
    {% if not request.session.is_hosting %}
        {% for calendar in room.get_calendars %}
            <div>
            {{calendar.get_month}} / {{calenday.year}}
            {% for day in calendar.day_names %}
                {{day}}
            {% endfor %}
            </div>
        {% endfor %}
    {% endif %}


# 24.2
css-grid

(templates/rooms/room_detail.html)
<div class="cal-grid">
    {% for day in calendar.day_names %}
        <span>{{day}}</span>
    {% endfor %}
</div>


(assets/scss/styles.scss)
.cal-grid{
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    grid-gap: 10px;
    justify-items: center;
}


(templates/rooms/room_detail.html)
<div class="cal-grid">
    {% for day in calendar.day_names %}
        <span>{{day}}</span>
    {% endfor %}
</div>
<div class="cal-grid">
    {% for day in calendar.get_days %}
        {% if day != 0 %}
            <span>{{day}}</span>
        {% else %}

        {% endif %}
    {% endfor %}



# 24.3

(cal.py)
from django.utils import timezone

class Day:
    def __init__(self, number, past):
        self.number = number
        self.past = past

class Calendar(~):
    def get_days(self):
        weeks = self.monthdays2calendar(self.year, self.month)
        days = []
        for week in weeks:
            for day, _ in week:
                now = timezone.now()
                today = now.day
                new_day = Day(day, day < today)
                days.append(new_day)
        return days

-> 이렇게 하고 browser를 보면, calendar에 숫자가 아니라 문자들이 써져있음 (Day가 class이기 때문임)
(cal.py)
class Day:
    def __init__(self, number, past):
        self.number = number
        self.past = past

    def __str__(self):
        return str(self.number)

-> 이렇게 하면 또 calendar에 0이 나옴
(templates/rooms/room_detail.html)
        {% if day.number != 0 %}
            <span>{{day}}</span>
        {% else %}

        {% endif %}
    {% endfor %}

-> 지나간 날짜들도 체크를 해보자
(templates/rooms/room_detail.html)
        {% if day.number != 0 %}
            {% if day.past %}
                <span css꾸며서 구분>{{day}}</span>
            {% else %}
                <span css꾸며서 구분>{{day}}</span>
        {% else %}

        {% endif %}
    {% endfor %}

-> 날짜들을 구분할 때 달은 체크를 안해주었음
(cal.py)
from django.utils import timezone

class Day:
    def __init__(self, number, past):
        self.number = number
        self.past = past

    def __str__(self):
        return str(self.number)

class Calendar(~):
    def get_days(self):
        weeks = self.monthdays2calendar(self.year, self.month)
        days = []
        for week in weeks:
            for day, _ in week:
                now = timezone.now()
                today = now.day
                month = now.month
                past = False
                if month  == self.month:
                    if day <= today:
                        past = True
                new_day = Day(day, past)
                days.append(new_day)
        return days


(rooms/models.py)
from django.utils import timezone, timedelta

class Room:
    def get_calendars(self):
        now = timezone.now()
        this_year = now.year
        this_month = now.month
        next_month = this_month + 1
        if this_month == 12:
            next_month = 1
        this_month_calendar = Calendar(this_year, this_month)
        next_month_calendar = Calendar(this_year, next_month)
        return [this_month_cal, next_month_cal]



# 24.4
filter and tag : filter - {{someting|upper}} 중 upper / tag - {% url %} 
* filter 와 tag를 만들어보자

** 우선 filter를 만들어보자 **
(rooms/templatetags 폴더 생성 
    - naming이 templatetags여야만 한다. 
    - __init__.py 도 잊지 말고 생성)
(rooms/templatetags/sexy_capitals.py)
from django import template

register = template.Library()

@register.filter()                          # @register.filter(name="sexy_capitals")
def sexy_capitals(value):                   # def weird(value):
    print(value)                            #   print(value)
    return "lalalal"                        #   return "lalalal"                        -> 좌,우 똑같은 것임 - filter이름과 function 이름이 같다면 왼쪽과 같이 표현하면 됨

-> load 하는 방법
원하는 html에서
    {% load sexy_capitals %}
하면 됨 

* 폴더나 파일 생성후에는 서버를 재시작 할 것

원하는 곳에 {{'something'|sexy_capitals}} 테스트 해보기
-> browser에는 lalalal이 출력이 되고, console에 print(value)는 something 이 있음(value=something)


(rooms/templatetags/sexy_capitals.py)
from django import template

register = template.Library()

@register.filter()                          
def sexy_capitals(value):                                  
    return value.capitalize()

-> 앞글자가 대문자로 변경



# 24.5
장고의 문제점: 날짜 등 정할때 check-in 15일, check-out 21일을 정한다고 하면
16~20일이 브라우저, 데이터 상에 처리가 안된다
-> tag를 이용해서 15~21까지 모든 숫자를 검색해서 예약이 되어있는지 찾아보는 것이다

(reservations/models.py)
class BookedDay(core_models.TimeStampedModel):
    day = models.DateField()
    reservation = models.ForeignKey("Reservation", on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Booked Day"
        verbose_name_plural = "Booked Days"


(reservations/admin.py)
@admin.register(models.BookedDay)
class BookedDayAdmin(admin.ModelAdmin):
    pass


(reservations/models.py/Reservation)
import datetime
    def save(self, *args, **kwargs):
        if self.pk is None:                                                                     # pk가 없다는 것의 의미: new reservation 의미, 즉 새로운 object라는 의미    
            start = self.check_in
            end = self.check_out
            difference = end - start 
            existing_booked_day = BookedDay.objects.filter(day__range=(start, end)).exists()              # BookedDay가 존재하는지 부터 체크..?     
            if not existing_booked_day:
                super().save(*args, **kwargs)                                                   # 예약된 날이 없다면, 우선 reservation을 저장하는 것, BookedDay가 Reservation과 ForeginKey로 연결되어있기 때문에 Reservation을 일단 저장해주어야(Reservation이 있어야) BookedDay에 reservation을 ForeignKey로 저장할 수 있기 때문
                for i in range(difference.days+1):                                              # 루프를 1씩 증가해서 돌면서, start부터 end 까지 하루하루씩 reservation 하는 것임
                    day = start + datetime.timedelta(days=i)                                    
                    BookedDay.objects.create(day=day, reservation=self)
                return 
        else:
            return super().save(*args, **kwargs)    # 기존 reservation 일때는 영향 없이 그저 save를 하는 것



# 24.7

(reservations/models.py)
class BookedDay(core_models.TimeStampedModel):
    day = models.DateField()
    reservation = models.ForeignKey("Reservation", on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Booked Day"
        verbose_name_plural = "Booked Days"

    def __str__(self):
        return str(self.day)


(reservations/admin.py)
@admin.register(models.BookedDay)
class BookedDayAdmin(admin.ModelAdmin):
    list_display = ('day', 'reservation')


-- 본격적으로 template tag 만들자 --
(rooms/templatetags/is_booked.py)
from django import template

register = template.Library()

@register.simple_tag(value)                        # simple_tag 말고 tag도 있다(더 많은 기능이 있음) / simple_tag(takes_context=True) : Django가 전달해주는 user나 다른 context를 받을 수 있다
def is_booked(room, day):
    print(room, day)


(templates/rooms/room_detail.html)
{% load is_booked %}

    {%for day in calendar.get_days %}
        {% is_booked room day as is_booked_bool %}      # room, day를 인자로 is_booked를 호출하고 있고, 그 결과를 is_booked_bool 변수에 저장해주는 것임
        {% if day.number != 0 %}                        # room: 템플릿에서 보여주는 날짜에 해당하는 room, day는 class Day를 가르킨다...


(rooms/templatetags/is_booked.py)
from django import template

register = template.Library()

@register.simple_tag(value)                        
def is_booked(room, day):
    if day.number == 0:
        return
    else:


(cal.py)
class Day:
    def __init__(self, number, past, month, year):
        self.number = number
        self.past = past
        self.month = month
        self.year = year

    def __str__(self):
        return str(self.number)

class Calendar(~):
    def get_days(self):
        weeks = self.monthdays2calendar(self.year, self.month)
        days = []
        for week in weeks:
            for day, _ in week:
                now = timezone.now()
                today = now.day
                month = now.month
                past = False
                if month  == self.month:
                    if day <= today:
                        past = True
                new_day = Day(number=day, past=past, month=self.month, year=self.year)      # 이제 이 day(new_day 지칭)를 template에 전달하면 day를 is_booked.py에 전달할 수 있다. 그러면 is_booked에서(else: 부분에서) reservation 을 찾을 수 있을거임
                days.append(new_day)
        return days


(rooms/templatetags/is_booked.py)
import datetime
from django import template
from reservations import models as reservation_models

register = template.Library()

@register.simple_tag(value)                        
def is_booked(room, day):
    if day.number == 0:
        return
    try:
        date = datetime.datetime(year=day.year, month=day.month, day=day.number)                    # Day class의 년, 월, 일을 전달해서 date object를 생성 - BookedDay에는 date 형식을 갖는 object가 필요하기 때문            
        reservation_models.BookedDay.objects.get(day=date, reservation__room=room)                  # day는 바로 위 date로, 해당 room을 가지고 있는 reservation을 찾기 위해 reservation__room=room이라는 필터링 이라는 두가지 조건을 가지고 BookedDay가 있는지 없는지 체크 (__로 연결하는 것이 ForeignKey를 이용하는 방법임..)
        return True                                                                                 # BookedDay를 찾았으면 True를 return (방이 예약되어 있는 개념으로 css 적용 할 것임) -> True False 값을 html의 is_booked_bool에 저장
    except reservation_modles.BookedDay.DoesNotExist:                                               # day, room을 model->template 개념이 아니라 template(brower에서 user가 선택한 것)->model로 받아온다는 개념으로 생각하면 맞는 것 같음
        return False


(templates/rooms/room_detail.html)
{% load is_booked %}

    {%for day in calendar.get_days %}
        {% is_booked room day as is_booked_bool %}                                                  # room, day를 인자로 is_booked를 호출하고 있고, 그 결과를 is_booked_bool 변수에 저장해주는 것임
        {% if day.number != 0 %}                                                                    # room: 템플릿에서 보여주는 날짜에 해당하는 room, day는 calendar로 부터 오는 day를 가르킨다...
            {% if day.past %}
                <span>{{day}}</span>
            {% elif is_booked_bool %}
                <span class="line-through">{{day}}</span>



# 24.9

(templates/rooms/room_detail.html)
{% load is_booked %}

    {%for day in calendar.get_days %}
        {% is_booked room day as is_booked_bool %}                                                  # room, day를 인자로 is_booked를 호출하고 있고, 그 결과를 is_booked_bool 변수에 저장해주는 것임
        {% if day.number != 0 %}                                                                    # room: 템플릿에서 보여주는 날짜에 해당하는 room, day는 calendar로 부터 오는 day를 가르킨다...
            {% if day.past %}
                <span>{{day}}</span>
            {% elif is_booked_bool %}
                <span class="line-through">{{day}}</span>
            {% else %}
                <a href="">{{day}}</a>


(reservations/urls.py)
from django.ruls import path
urlpatterns=[
    path("create/<int:room>/<int:year>-<int:month>-<int:date>/")
]


(config/urls.py)
path("reservations/", include("reservations.urls", namespace="reservation"))


(reservations/views.py)
from django.shortcuts import render

def create(request, room, year, month, day):
    print(room, year, month, day)


(reservations/urls.py)
from django.ruls import path
from . import views
app_name = "reservations"
urlpatterns=[
    path("create/<int:room>/<int:year>-<int:month>-<int:day>/", views.create, name="create")
]


(templates/rooms/room_detail.html)
{% load is_booked %}

    {%for day in calendar.get_days %}
        {% is_booked room day as is_booked_bool %}                                                  
        {% if day.number != 0 %}                                                                    
            {% if day.past %}
                <span>{{day}}</span>
            {% elif is_booked_bool %}
                <span class="line-through">{{day}}</span>
            {% else %}
                <a href="{% url 'reservations:create' room.pk day.year day.month day.number %}">{{day}}</a>               # day.year : class Day.year 등 가르킴...


(reservations/views.py)
import datetime
from django.views.generic import View
from django.contrib import messages
from django.shortcuts import render, redirect, reverse
from rooms import models as room_models
from . import models

class CreateError(Exception):
    pass

def create(request, room, year, month, day):
    try:
        date_obj = datetime.datetime(year=year, month=month, day=day)
        room = room_models.Room.objects.get(pk=room)
        models.BookedDay.objects.get(day=date_obj, reservation__room=room)
        raise CreateError()                                                                 # BookedDay가 있다면, 예약할수 없는거니까 Error 발생시키기
    except room_models.Room.DoesNotExist:
        messages.error(request, "Can't Reserve That Room")
        return redirect(reverse("core:home"))
    except models.BookedDay.DoesNotExist:
        reservation = models.Reservation.objects.create(
            guest = = request.user,
            room = room
            check_in = date_obj,
            check_out = date_obj + datetime.timedelta(days=1)
        )
        return redirect(reverse("reservations:detail", kwargs={"pk": reservation.pk}))

class ReservationDetailView(View):
    def get(self):
        pass


(reservations/urls.py)
    path("<int:pk>/", views.ReservationDetailView.as_view(), name="detail"),



# 24.10
(reservations/urls.py)
class ReservationDetailView(View):
    def get(self, *args, **kwargs):                                          # urls.py에서 pk를 가지므로 get이 pk를 받는다
        try:
            reservation = models.Reservation.objects.get(pk=pk)
        except models.Reservation.DoesNotExist:
            pass

*except models.Reservation.DoesNotExist 등 계속 반복적으로 사용하는걸 줄여보자
(reservations/managers.py 파일 생성)
from django.db import models
class CustomReservationManager(models.Manager):
    def get_or_none(self, **kwargs):                            # **kwargs는 models.Reservation.objects.get(pk=pk)등, 받게 될 인자에 대한 표현
        try:
            return self.get(**kwargs)                       
        except self.model.DoesNotExist:
            return None


(reservations/models.py/Reservation)
from . import managers
    
    objects = managers.CustomReservationManager()               # manager.py 사용하려면, model에 추가해줘야 한다. - 기본적으로 model은 manager.py를 가지고 있기 때문에


(reservations/urls.py)
class ReservationDetailView(View):
    def get(self, *args, **kwargs):                                          
            reservation = models.Reservation.objects.get_or_none(pk=pk)
            if not reservation:
                return redirect(reverse("core:home"))



# 24.11

(reservations/views.py)
from django.http import Http404

class ReservationDetailView(View):
    def get(self, *args, **kwargs):
        pk = kwargs.get('pk')                                         
        reservation = models.Reservation.objects.get_or_none(pk=pk)
        if not reservation or (reservation.guest != self.request.user and reservation.room.host != self.request.user)):
            raise Http404
        return render(self.request, "reservations/detail.html, {'reservation':reservation})


(templates/reservations/detail.html 생성 - room_photos.html 양식)


# 24.12

(templates/reservations/detail.html)
    {{reservation.get_status_display}}                                      # {{reservation.status}}를 바꾼것 : pending -> Pending을 원해서 : django에 있는 기능이고, ("pending":"Pending") 에서 오른쪽 값을 줌

    {% if reservation.status == 'pending' %}
        <a href="$">Cancel Reservation</a>
        {% if reservation.room.host == user %}
            <a href="$">Confirm Reservation</a>
        {% endif %}
    {% endif %}
    


# 24.13

(reservations/views.py)
def edit_reservation(request, pk, verb):
    reservation = models.Reservation.objects.get_or_none(pk=pk)
    if not reservation or (reservation.guest != request.user and reservation.room.host != request.user)):
        raise Http404()
    if verb == "confirm":
        reservation.status = models.Reservation.STATUS_CONFIRMED
    elif verb == "cancel":                                                                  
        reservation.status = models.Reservation.STATUS_CANCELED
        models.BookedDay.objects.filter(reservation=reservation).delete()                               # cancel이 되면 그 reservation의 BookedDay를 모두 삭제 해야 한다
    reservation.save()
    messages.success(request, "Reservation Updated")
    return redirect(reverse("reservations:detail", kwargs={'pk':reservation.pk}))


(reservations/urls.py)
    path("<int:pk>/<str:verb>", views.edit_reservation, name="edit")                                     # verb는 cancel, confirm 같은 단어가 될것임


(templates/reservations/detail.html)
    {% if reservation.status == 'pending' %}
        <a href="{% url 'reservations:edit' reservation.pk 'cancel' %}">Cancel Reservation</a>
        {% if reservation.room.host == user %}
            <a href="{% url 'reservations:edit' reservation.pk 'confirm' %}">Confirm Reservation</a>
        {% endif %}
    {% endif %}
    


# 24.14

(templates/reservations/detail.html)
{% if reservation.status != 'canceled' %}
    {% if reservation.status == 'confirmed' and reservation.is_finished %}


(reservations/models.py/Reservation)

    def is_finished(self):
        now = timezone.now().date()
        is_finished = now > self.check_out
        if is_finished:
            BookedDay.objects.filter(reservation=self).delete()     # 예약기간 지나면 BookedDay 자동으로 지워지게 / confirmed 클릭해줘야 로직 완성되어서 삭제 되는듯
        return is_finished


(reviews/forms.py)
from django import forms
from . import models

class CreateReviewForm(forms.ModelForm)

    class Meta:
        model = models.Review
        fields = (
            "review",
            ...
        )


(reservations/views.py/ReservationDetailView/get)
from reviews import forms as review_forms
    form = review_forms.CreateReviewForm()
    return render(
        self.request,
        "reservations/detail.html",
        {"reservation":reservation, "form":form},
    )


(templates/reservations/detail.html)
    {% if reservation.status != 'canceled' %}
        {% if reservation.status == 'confirmed' and reservation.is_finished %}
            <span> Write your review</span>
            <form action="" method="POST" class="w-1/2 mx-auto">
                {% csrf_token %}
                <button class="btn-link mt-5">Submit Review</button>
            </form>
        {% else %}
            {% if reservation.status == 'pending' %}
                <a href
                {% if reservation.room.host == user %}
                    <a href
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}


(reveiws/views.py)

def create_review(request, room):
    pass


(reviews/urls.py)
from django.urls import path
from . import views

app_name = "reviews"

urlpatterns = [path("create/<int:room>", create_review, name="create")]


(config/urls.py)
urlpatterns = [path("reviews/", include("reviews.urls", namespace="reviews")),]


(templates/reservations/detail.html)
    {% if reservation.status != 'canceled' %}
        {% if reservation.status == 'confirmed' and reservation.is_finished %}
            <span> Write your review</span>
            <form action="{% url 'reviews:create' reservation.room.pk %}" method="POST" class="w-1/2 mx-auto">
                {% csrf_token %}
                <button class="btn-link mt-5">Submit Review</button>
            </form>
        {% else %}
            {% if reservation.status == 'pending' %}
                <a href
                {% if reservation.room.host == user %}
                    <a href
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}



# 24.15

(reveiws/views.py)
from . import forms

def create_review(request, room):
    if request.method =="POST":
        form = forms.CreateReviewForm(request.POST)             # form에 모든 데이터를 줄것임
        room = 


(reservations/managers.py 에 작성해 두었던 것을 지우고 core로 옮기자)  # 여러 군데서 쓸것임
(core/managers.py)
from django.db import models
class CustomModelManager(models.Manager):
    def get_or_none(self, **kwargs):
        try:
            return self.get(**kwargs)
        except self.model.DoesNotExist:
            return None


(core/models.py)
from . import managers

class TimeStampedModel:
    updated = ~
    objects = managers.CustomModelManager()                 # 이게 TimeStapedModel을 쓰는 model 모두에게 manager를 보내줌


(reservations/models.py)
  objects = manages.CustomReservationManager() 삭제 해주기


(reveiws/views.py)
from django.shortcuts import redirect, reverse
from rooms import models as room_models
from . import forms

def create_review(request, room):
    if request.method =="POST":
        form = forms.CreateReviewForm(request.POST)             # form에 모든 데이터를 줄것임
        room = room_models.Room.objects.get_or_none(pk=room)
        if not room:
            return redirect(reverse("core:home"))
        if form.is_valid():


(reviews/forms.py)
class CreateReviewForm():
    def save(self):
        review = super().save(commit=False)
        return review                                       # reviews/views.py/create_review의 if form.is_valid(): 에서 form으로부터 review를 받을 수 있게 된다
        

(reviews/views.py)
from django.contrib import messages
from django.shortcuts import redirect, reverse
from rooms import models as room_models
from . import forms

def create_review(request, room):
    if request.method =="POST":
        form = forms.CreateReviewForm(request.POST)            
        room = room_models.Room.objects.get_or_none(pk=room)
        if not room:
            return redirect(reverse("core:home"))
        if form.is_valid():
            review = form.save()
            review.room = room
            review.user = request.user
            review.save()
            messages.success(request, "Room reviewed")
            return redirect(reverse("rooms:detail", kwargs={'pk': room.pk}))
    

* review 순서 바꾸기
(reviews/models.py/Review)
    class Meta:
        ordering = ('-created',)        # -created: 최신순으로



# 24.16

(reviews/models.py/Review)
from django.core.validators import MinValueValidator, MaxValueValidator

class Review(core_models.TimeStampedModel):

    review = models.TextField()
    accuracy = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    communication = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    cleanliness = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    location = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    check_in = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    value = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    user = models.ForeignKey(
        "users.User", related_name="reviews", on_delete=models.CASCADE)                                     
    room = models.ForeignKey(
        "rooms.Room", related_name="reviews", on_delete=models.CASCADE)                                                


(reviews/form.py)
from django import forms
from . import models

class CreateReviewForm(forms.ModelForm):
    accuracy = forms.IntegerField(max_value=5, min_value=1)
    communication = forms.IntegerField(max_value=5, min_value=1)
    cleanliness = forms.IntegerField(max_value=5, min_value=1)
    location = forms.IntegerField(max_value=5, min_value=1)
    check_in = forms.IntegerField(max_value=5, min_value=1)
    value = forms.IntegerField(max_value=5, min_value=1)

    class Meta:
        model = models.Review
        fields = (
            "review",
            "accuracy",
            "communication",
            "cleanliness",
            "location",
            "check_in",
            "value",
        )
    def save(self):
        review = super().save(commit=False)
        return review



# 25.0

translation - 번역
(locale 폴더 생성)
django가 locale 폴더 안에 translation 파일들을 넣을 거임 


(config/settings.py)                                                # translations을 hold할 폴더가 있다고 말해주는 것
# Locale
LOCALE_PATH = (os.path.join(BASE_DIR, "locale"), )                  # 아직 부족. translations가 없기 때문 또는 어떤 파일을 translate할 것이라 지정하지 않았기 때문

* 원하는 부분을 통역하는 방법
1) 원하는 부분 이동(html)
2) 맨 위에 {% load i18n %}                                          # internationalization 혹은 i18n # load 여러개 가능 - {% load static i18n %}
3) 원하는 text를 trans 코드 안에 넣는다
        {% trans "~" %}
    
        (templates/partials/footer.html)
        {% load i18n %}
            <span>
                {% trans "Please don't copy us" %}
            </span>

4) 콘솔에서 django-admin makemessages --locale=번역할 언어 코드     # Django에는 makemessages, compilemessages가 있는데 여기서는 makemessages를 쓸거라고 함
   -> locale 안에 폴더/파일 생성 django.po                          # 윈도우에서 xgettext:관련 오류날 경우 -i 옵션으로 가상환경 위치 주니까 해결 됐다 함 : django-admin makemessages --locale=es -i venv

5) (오류가 생길텐데) Mac 유저라면 brew install gettext 를 설치하고 brew link gettext --force 라고 link 해줘야 함
   window 유저는 gettext windows binaries 검색 - https://mlocati.github.io/articles/gettext-iconv-windows.html - 32bit든 64bit든 다운받아 설치 (나는 64bit, static 버전 받았음-안되면 컴퓨터 다시 시작)



# 25.1

*) gettext extension 설치 - 필수는 아니나 nicco 처럼 화면 보려면..

6)
(locale/../django.po)
#: ~ : 내가 trans tag 정해준 곳
msgid "~" : 번역하고자 하는 text
msgtr "" : 이 안에 번역하려는 말 넣어주면 됨                        # 번역하고 싶은 text 여기에 바로 추가 X , 우선 trans tag로 mark를 먼저 해줘야 함

7) 다 끝나면 번역이 끝났다고 알려주는 것
    django-admin compliemessages
    -> locale/././django.mo 생성됨                                  # compile된 파일임 .po는 사람이 읽을 수 있는, .mo는 django가 읽을 수 있는 정도..?

- 아직 홈페이지 변화 없음 -- session의 언어 바꾸어야 함 - start hosting / stop hosting 하듯이 session 설정해주어야 함

8)
(templates/partials/footer.html)
{% load i18n %}
    {% trans "Please don't copy us." %}
    <select id="js-lang">
        <option value="en">English</option>
        <option value="es">Spanish</option>
    </select>


- JavaScript를 써보자
(templates/base.html)
    <script>
        const langSelect = document.getElementByID("js-lang");
        const handleLangChange = () => {
            const select = lanagSelect.value;                       # test: console.log(langSelect.value); 이렇게 해주고 webbrower에서 언어 선택하면 브라우저 콘솔창에 langSelect.value(en, es) 확인 가능
            window.location.reload();                               # 그 페이지를 reload 할거라고 말해주는 코드..(?)      # location.reload(): reload the current document  # reload: 새로고침인듯                                                                         
        }
        langSelect.addEventListender("change", handleLangChange);
    </script>                                                      


(users/views.py)
from django.http import HttpResponse

def switch_language(request):
    lang = request.GET.get("lang", None)
    if lang is not None:
        pass
    return HttpResponse(status=200)


(users/urls.py)
    path("switch-language/", views.switch_language, name="switch-language")


(templates/base.html)
    <script>
        const langSelect = document.getElementByID("js-lang");
        const handleLangChange = () => {
            const select = lanagSelect.value;               
            fetch(`{% url "users:switch-language" %}?lang=${selected}`).then()(() => window.location.reload());                # 이 script는 url을 selected language로 fetch 할거라고 함. then(): fetch가 된 후에 reload                                                                                                                         
        }
        langSelect.addEventListender("change", handleLangChange);
    </script>                                                                                                               # 확인 해보기: 브라우저 f12, Network, Preserved log 체크하고 언어 선택하면 /users/switch-language/?lang=es 등 기대한 대로 request를 보내고 있음 확인 가능
                                                                                                                            # banckend의 요청?을 듣고 있는 것을 확인 한 것임


# 25.2

- session의 language 바꿔주자
(users/views.py)
from django.utils import translation                

def switch_language(request):
    lang = request.GET.get("lang", None)
    if lang is not None:
        reuqest.session[translation.LANGUAGE_SESSION_KEY] = lang                        
    return HttpResponse(status=200)                                     # 강의에서는 이렇게 알려줬는데, 안됨.

def switch_language(request):                                           # 어떤 유저가 댓글에 남겼는데 이게 됨
    lang = request.GET.get("lang", None)
        if lang is not None:
        response = HttpResponse(200)
        response.set_cookie(settings.LANGUAGE_COOKIE_NAME, lang)
        return response



- session의 language를 pick up할 게 아직 없고, translation을 execute할 것도 아직 없음
- LocaleMiddleware를 이용: request.session 안의 LANGUAGE_SESSION_KEY를 가져와서 내가 지정한 key로 번역 해준다.

(config/settings.py) - 활성화
MIDDLEWARE = [
    "django.middleware.locale.LocaleMiddleware",                # 이렇게 추가
]                                                               # 이제 LANGUAGE_SESSION_KEY로 session을 바꿀 때마다 LocaleMiddleware가 session을 가져와서 template에서 translation 을 실행할 것임


- 이제 변경하면 번역 되는데,
- 기본값으로 설정되어 있는 English가 선택이 안된다 - 이를 해결해보자 (by get_current_language)


(templates/partials/footer.html)
{% load i18n %}
    {% trans "Please don't copy us." %}
    {% get_current_language as LANGUAGE_CODE %}
    <select id="js-lang">
        <option value="en" {% if LANGUAGE_CODE == 'en' %}selected{% endif %}>English</option>
        <option value="es" {% if LANGUAGE_CODE == 'es' %}selected{% endif %}>Spanish</option>
    </select>                                                                                       # 이렇게 해주고 나면 English도 선택 가능한데, 국가명도 바뀌는것 확인 가능 : django countries package가 countries에 대한 translation을 가지고 있는 것 같음



# 25.3
- 내부에 variable(ex {{page}}) 이 있는 것들 번역하기
- blocktrans tag 사용 :{% blocktrans %} {% endblocktrans %}

(templates/rooms/room_list.html)
{% load i18n %}

{% blocktrans %}
    Page {{page_obj.number}} of {{page_obj.paginator.num_pages}}
{% endblocktrans %}

- 이렇게만 하면 variable은 사라짐
blocktrans 안에 변수명을 다시 설정 해주어야 함

{% blocktrans with a=page_obj.number b=page_obj.paginator.num_pages %}Page {{a}} of {{b}}{% endblocktrans %}


(locale/././django.po)
msgid "Page %(a)s of %(b)s"
msgstr "Pagina %(a)s de %(b)s"

- 변경 해주고 django-admin makemessages --locale=es -> 번역 -> django-admin compilemessages


- 이제 python code를 번역하는 것 필요. 지금까지 한건 template을 위한거였음
from django.utils.translation import gettext_lazy
    팁 gettext_lazy as _로 호출해서
    _()감싸면서 작성하기
        -> ex) (users/models.py)
            from django.utils.translation import gettext_lazy as _

            class User(AbstractUser):
                GENDER_CHOICES = (
                (GENDER_MALE, _("Male")),
                (GENDER_FEMALE, _("Female")),
                (GENDER_OTHER, _("Other")),
                )

                LANGUAGE_CHOICES = (
                (LANGUAGE_ENGLISH, _("English")),
                (LANGUAGE_KOREAN, _("Korean")),
                )



# 25.4

(templates/rooms/room_detail.html)
    <a href="#">{% trans "Save to Favourites" %}</a>


(lists/views.py)
def save_room(request):
    pass


(lists/urls.py 생성)
from django.urls import path

    app_name = "lists"

    urlpatterns = [path("add/<int:room_pk>", views.save_room, name="save-room")]]


(config/urls.py)
    path("lists/", include("lists.urls", namespace="lists")),


(templates/rooms/room_detail.html)
    <a href="{% url 'lists:save-room' room.pk %}">{% trans "Save to Favourites" %}</a>


(lists/views.py)
from django.shortcuts import redirect, reverse
from rooms import models as room_models
from . import models

def save_room(request, room_pk):                                                    # 1. list를 가져와야 한다. / 2. list에 room과 pk를 추가해야 한다.
    room = room_models.Room.objects.get_or_none(pk=room_pk)
    if room is not None:
        the_list, created = models.List.objects.get_or_create(                      # get은 하나만 찾기 때문에 user에게 한개보다 많은 리스트가 있다면 오류가 발생할 것이다(Multiple object have been returned)
            user=request.user, name="My Favourite Houses"                           # get_or_none()은 core/managers에 우리가 만든 함수이고,
            )                                                                       # get_or_create()는 django에 있는 메소드임
        the_list.rooms.add(room)
    return redirect(reverse("rooms:detail", kwargs={'pk': room_pk}))



# 25.5

(lists/templatetags 폴더 생성, __init__.py 생성)
(lists/templatetags/on_favs.py 생성)
from django import template

register = template.Library()

@register.simple_tag(takes_context=True)
def on_favs(context, room)                  
    pass


(templates/rooms/room_detail.html)
{% load on_favs %}

{% on_favs room as on_favs_boolean %}


(lists/templatetags/on_favs.py)
from django import template
from lists import models as list_models

register = template.Library()

@register.simple_tag(takes_context=True)
def on_favs(context, room)                  
    user = context.request.user
    the_list = list_models.List.objects.get_or_none(user=user, name="My Favourite Houses")             # name -> lists/views.py에서 만들어준 def save_room의 the list의 name과 같아야 함 / 이 구문의 실행은 리스트가 하나 더 있다면 에러가 날 것
                                                                                                       # 이걸 고치려면, lists models에 가서 ForeginKey 대신에 OneToOne 사용 - OneToOne: 한 user가 한 list를 가질 수 있따는 의미

(lists/models.py)
class List
    user = models.OneToOneField(안에 내용 그대로)                                 # 해주고 migrate - 이제 django 모델로도 protectect 된 상황이라 함


(lists/templatetags/on_favs.py)
@register.simple_tag(takes_context=True)
def on_favs(context, room)                  
    user = context.request.user
    the_list = list_models.List.objects.get_or_none(user=user, name="My Favourites Houses")            
    return room in the_list.rooms.all()                                                             # True나오는지 테스트: print(room in the_list.rooms.all()) 해줘서 True값 나오면 the_list.rooms 리스트에 room이 있다는 의미


(templates/rooms/room_detail.html)
{% load on_favs %}

{% on_favs room as on_favs_boolean %}
{% if on_favs_boolean %}
    Remove from Favourites
{% else %}
    Save To Favourite
{% endif %}



# 25. 6

(lists/urls.py)

add/<int..> 로 되어있는 add를 toggle로 변경, views.toggle_room으로 변경 name="toggle-room"으로 변경


(lists/views.py)
def save_room을 def toggle_room으로 변경


(templates/rooms/room_detail.html)
{% url 'lists:save-room' room.pk %} -> {% url 'lists:toggle-room' room.pk %}?action=remove
{% url 'lists:save-room' room.pk %} -> {% url 'lists:toggle-room' room.pk %}?action=add


(lists/views.py)
def toggle_room(request, room_pk):
    action = request.GET.get("action", None)
    ~
    if room is not None and action is not None:
        ~
        if action == "add":
            the_list.rooms.add(room)
        elif action == "remove":
            the_list.rooms.remove(room)
    return redirect(reverse("rooms:detail", kwargs={"pk": room_pk}))


(templates/partials/nav.html)
{% if request.session.is_hosting %}
{% endif %}
    <li><a href="">{% trans "Favs" %}</a></li>


(lists/urls.py)
path("favs/", views.SeeFavsView.as_view(), name="see-favs")


(lists.views.py)
from django.views.generic import TemplateView

class SeeFavsView(TemplateView):

    template_name = "lists/list_detail.html"


(templates/partials/nav.html)
{% if request.session.is_hosting %}
{% endif %}
    <li><a href="{% url 'lists:see-favs' %>{% trans "Favs" %}({{user.list.rooms.count}})</a></li>

-> 새로고침하면 list_detail.html 없다 함 -> 생성

(templates/lists/list_detail.html 생성)
user_detail.html 양식 사용

{% extends "base.html" %}

{% block page_title %}
    {{user.first_name}}'s Fav
{% endblock page_title %}

{% block content %}

    <div class="min-h-75vh">

        <h3 class="mb-12 text-2xl text-center">Your Favourites</h3>


    <div class="container mx-auto pb-10 ">
        <div class="flex flex-wrap -mx-40 mb-10">
            {% for room in user.list.rooms.all  %}
                {% include 'mixins/room_card.html' with room=room %}
            {% endfor %}
        </div>
    </div>


    </div>
{% endblock content %} 


(lists/models.py/List)
user = models.OneToOneField("users.User", related_name="list", ~)  # OneToOne이니까 related_name도 lists말고 list로 바꿔주자



# 25.7





# 26.0

pipenv install awsebcli  or  pip3 install awsebcli
    배포를 위해 AWS Elastic Beanstalk 사용
    지역선택(유저들이 많은 곳)
    EC2 선택 (elastic computing)
    여러가지 서버 선택 가능
    선택후 서버로 연결 가능
    연결 후 파이썬 등 설치 해야 함(python, pip, git)
    서버에 코드를 보내는 시스템을 만들어야 함
    --> 이렇게 하는 것은 서버에 대해서 처음부터 알아야 하기 때문에 이걸 이용하지 않고 Elastic Beanstalk 이용할 것

    Elastic Beanstalk
    - 일종의 ec2 인스턴스를 만드는 단축키인 셈
    자동적으로 ec2라 불리는 인스턴스를 생성

    윈도우즈는 아래 document를 보고 실행
    https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html
    https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install-windows.html
        - doc에서는 pipenv install awsebcli --upgrade --user 로 설치하고 업그레이드 하라고 했는데
        - 나는 pipenv install awsebcli 까지만 하고 진행함 (--upgrade 추가하면 계속 오류) --> pip3 install awsebcli --upgrade --user

    - console에 eb 쳐서 내용 볼 수 있어야 함

eb init
    - Configure the EB CLI
    (console)
    eb init   # eb init --interactive : eb init 초기화 해서 하는 방법임
    디폴트를 Seoul로 바꿔줘야 함 (10)
    You have not yet set up your credentials or your credentials are incorrect/You must provide your credentials./(aws-access-id):
    라고 뜨면, 우린 유저를 생성해야 함 -> aws 사이트에서 iam 검색
    Users/Add user/ User name: airbnb-eb 입력, Access Type: Programmatic access 체크 / Next: Permission
    Attach existing policies directly 클릭 -> AdministratorAcccess 체크(맨위/일단은...) / Next: tags / Next: Review / Create User
    Access Key ID, Secret access key -> Secret access key는 따로 저장(절대 잊어버리면 안됨)
    여기서 얻어진 Access Key ID를 콘솔창에 (asw-access-id):에 입력하고 엔터 / secret key도 입력 엔터
    Enter Application Name(default is "airbnb-clone"): (맞으니)엔터
    It appears you are using Python. Is this correct?(Y/n): y 엔터
    select a platform version. - pipfile 보고 선택 / 없으면 그냥 디폴트로 엔터
    Do you wish to continue with Codecommit?(y/N) (default is n): n 엔터 (이 강의에서는 CodeCommit는 생략)
    *** (air_bnb_clone_integrity-AJLCh_32) C:\Users\oem\Desktop\airbnb\air_bnb_clone_integrity>eb init
    Do you wish to continue with CodeCommit? (Y/n): n
    ERROR: UnicodeDecodeError - 'cp949' codec can't decode byte 0xec in position 2184: illegal multibyte sequence 이런 에러가 발생햇는데
    .gitignore에 #으로 써져있는 것 중 한글을 지웠더니 해결 ***
    Do you want to set up SSH for your instances?(Y/n): n 엔터(SSH : 나의 인스턴스를 액세스 할 수 있게 도와준다 함, Elastic Beanstalk은 AWS사이트에(?) instance를 만들어준다. 서버를 직접 들어가서 보고 파일을 만들거나 파일을 지우거나 그런 작업을 하고 싶으면 Yes 해주면 됨. 우리는 n - y하면 오류가 많이 난다고 함)
    여기까지 하면 Elastic Beanstalk 설정 완료

# 26.1
.ebextensions/django.config 생성
option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: config.wsgi:application   (config/wsgi.py)  

    - 최 상단에 .ebextensions 폴더 생성
    
    - .ebextensions/django.config 생성

    -https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html
    에 있는
    option_settings:
    aws:elasticbeanstalk:container:python:
        WSGIPath: ebdjango.wsgi:application
    복붙

    (.ebextensions/django.config)
    option_settings:
    aws:elasticbeanstalk:container:python:
        WSGIPath: ebdjango.wsgi:application

    - 내가 이해해야 하는건 바로, 개발서버에서 작업하고 있을 때 나는 python manage.py runserver 이런 커맨드를 쓸 수 있다 -> 실제 상황에서 좋지 않다 - django 공식문서에도 python manage.py runserver는 배포용(production)이 아니라고 나와있다 함
    - 이게 config 폴더에 wsgi.py가 있는 이유임 : wsgi - django 앱을 배포하는 하나의 방법
        Elastic Beanstalk이 (python manage.py runserver가 아니라) wsgi를 통해 우리 서버를 작동
    - Elastic Beanstalk 에게 django wsgi 파트가 어디있는지 알려줘야 함. 이 위치를 django.config의 WSGIPath:에 설정
        (.ebextensions/django.config)
        WSGIPath: config.wsgi:application    # 강의에서는 WSGIPath: config/wsgi.py 라고 했으나 ImportError: Failed to find application, did you mean 'config/wsgi:application'? 이런 에러 발생 또한 ModuleNotFoundError: No module named 'config/wsgi'
        ** 다음 사이트 가서 확인 가능 **
            https://stackoverflow.com/questions/62049763/aws-elastic-beanstalk-wsgi-path-incorrect
            I had the same issue. It is because of the Amazon Linux 2 machine image. Its configuration files are incompatible with those of the old version. Please see:
            https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.migration-al.html. I ended up using the old version because the documentation says:

            If you're using an Amazon Linux 2 platform version that is in beta for your evaluation, do not go to production. Wait until we release a supported platform version.

            You can create an Elastic Beanstalk environment using the Amazon Linux machine image (old version) using the command line tool. Here are the commands (replace <...> with your data):

            eb init -p python-3.6 <ApplicationName> --region <Region>
            eb create <EnvironmentName> --elb-type application --platform "64bit Amazon Linux 2018.03 v2.9.10 running Python 3.6"

            Update 2020-06-02 As I mentioned before, the issue is caused by Amazon Linux 2 platform
            because it uses Gunicorn, which has a WSGI syntax that is different than the previous version.

            """"""" The WSGIPath must be ebdjango.wsgi:application. """"""""

            Please see https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-container.html#python-namespaces.


git add, git commit, deploy

    -이제 가상환경 만들어 주어야 한다.
        콘솔에 eb create ~
        이 경우에는 eb create airbnb-clone 이라 해보자 ( _ 언더바는 안됨 에러 발생)

    - aws 홈페이지로 오면 airbnb-clone 탭이 생긴걸 볼 수 있을거임 

    - airbnb-clone의 airbnb-clone 클릭 - Creating airbnb-clone으로 가상환경 돌아가는거 볼 수 있음


    - Elastic Beanstalk은 내가 만든 폴더(airbnb_integrity)안에 있는 모든 파일을 가져가서 압축시킬거임
    - 그리고 이렇게 생성된 zip을 AWS s3로 업로드 함
    - 그리고 쉬운 인스턴스를 나 대신 만들어준다

    - 다 만들어지면, EC2로 가서 인스턴스를 볼 수 있다


    - 추천: 가상환경을 2개 만든다
        1) airbnb-clone 테스팅 서버
        2) airbnb-clone 프로덕션 서버
        - 테스팅 서버에서 잘 체크해보고 잘 되면 프로덕션 서버에 실제 배포

    - 다시 콘솔창으로 돌아오면.. ERROR 발생 볼 수 있을 것임
        ERROR Your WSGIPath refers to a file that does not exist.
        이 에러가 왜 발생하냐면, Elastic Beanstalk은 내가 생성한 파일들만 가져가는게 아니라 git에 commit 되어 있는 것까지 가져간다,
        그래서 예를들어, 우리는 방금 WSGIPath를 수정하고 변경사항을 commit 해줬다면
        -> 콘솔에 eb deploy 해서 Elastic Beanstalk이 git 수정사항까지 반영함(? git에 commit 안해줬으면 eb deploy 안해줘도 되나???)
        X :  Elastic Beanstalk은  왼쪽에 있는 파일들을 그대로 가져가는게 아니라,  그 팔일들이 git에 commit 된거를 가져가기 때문에, 기본적으로 commit을 해줘야 한다.
            따라서 .env 등은 .gitignore에 등록해주었기 때문에 Elastic Beanstalk에 업로드 되지 않는다.

    - deploy하고 나면 봐야할 것은 wsgi 파트가 정상적으로 작동되는지 봐야 함



# 26.2 
*** 요약: pipenv install pipenv-to-requirements -dev 엔터 -> pipenv_to_requirements -f 엔터
***** 다시: pipenv install pipenv-to-requirements 해주고 pipenv lock -r > requirements.txt 로 생성해주라고 함
        다른 환경에서 개발하던 자료 그대로 설치할때
            다른 환경에서 만든 requirements.txt 파일 복하고, 원하는 경로에서
            pip install -r requirements.txt

    404에러 대신 Internal Sever Error 나옴(500 error) (정상임)
    aws사이트에서 configuration(한글로는 "구성"란 들어가면 됨) 보면 software의 options의 WSGIPath:config/wsgi.py로 올바르게 나온다.
    콘솔에서 eb logs 엔터 - django, http, Elastic Beanstalk 등 으로부터 나온 로그를 보여준다
        -> 웹사이트를 볼 수 없는 이유 찾을 수 있음 - MoudleNotFoundError: No module named 'django' (모듈이 없어서 생기는 에러)
            ** pipenv shell를 안하고, 즉 pipenv 버블로 가지 않고 python manage.py runserver를 실행시키면 MoudleNotFoundError: No module named 'dotenv' 발생
        -> 위 에러는 pipenv 밖에는 아무것도 설치되어 있지 않기 때문에 생기는 eroor임
            따라서 django는 Elastic Beanstalk 서버에 아직 설치 되지 않은 것임
        -> 해결책: Elastic Beanstalk에게 Pipfile 안에 ([packages] 안에)있는 모든 걸 설치하도록 해야 함 
                -> 콘솔에 pip freeze > requirements.txt : requirements.txt 파일을 만든다
                    requirements.txt 파일은 Pipfile 안의 [packages]안의 것들을 모두 txt 파일로 만들어준다
                -> 또는 (pip freeze > requirements.txt 대신에) pipenv install pipenv-to-requirements 또는 pipenv install pipenv-to-requirements -dev (개발용)를 쓸 수 있다.    
                    이를 실행시켜서 설치해주고, pipenv_to_requirements -f (또는 pipenv run pipenv_to_requirements -f ?) 를 써서 requirements.txt를 만들어준다. (-f 는 frozen requirements(version frozen)를 생성해주기 위해서라고 함..) 
                * requirements.txt 안에서 마지막 줄은 빈칸이어야 한다. 어떻게?
                    ...
                    ...
                    urllib3==1.25.6
                    (빈칸 필수)
        
                            * requirements.txt는 무엇인가??
                                - 비교를 하자면, node.js의 package.json 같은 것
                                - (프로젝트를 헤로쿠로 하거나, 엘라스틱 빈스택으로 하거나 구글 클라우들를 하거나 어쨌든,) python 프로젝트가 있다면 반드시 requirements.txt를 봐야 함
                                - 그리고 기본적으로(Default) Elastic Beanstalk은 requirements.txt를 찾는다. 찾아서 있다면, 그 안에 있는 모듈을 설치해준다.
                                - 현재 우리는 없기 때문에 pipenv_to_requirements -f (또는 pipenv run pipenv_to_requirements -f ?) 를 써서 생성 -f 는 frozen requirements(version frozen)를 생성해주기 위해서라고 함..
                -> requirements.txt / requirements-dev.txt 두개 생성되는데, dev는 개발용이니까 신경끄고 requirements.txt로 보면 버전까지 포함해서 Pipfile에 있는 것들이 적혀있음을 확인 가능 - 난 2개 안생기고 하나만 생김. dev 안생김..
                
                - 아마존은 루트에서 requirements.txt를 찾는다. (헤로쿠, 구글도)
    *** 요약: pipenv install pipenv-to-requirements -dev 엔터 -> pipenv_to_requirements -f 엔터
    ***** 다시: pipenv install pipenv-to-requirements 해주고 pipenv lock -r > requirements.txt 로 생성해주라고 함

    - git add.
    - git commit -m "26.2 Requirements"   (강의명으로 commit 해준거임)
    - eb deploy (하고 좀 기다려야 함)


- 다 끝나고 eb logs 에서 installation 부분 보면,django-dotenv, django-seed, faker 등등 설치 된게(collecting 된게) 확인 가능
    - 여기서 SQLite 관련 에러 볼 수 있음
        raise ImproperlyConfigured('SQLite 3.8.3 or later is require..)
        - why?
            setting.py를 보면 DATABASE에 db.sqlite3 되어있음 , db.sqplite3는 python manage.py runserver 실행될때 생성됨.
            wsgi로 파이썬이 시작됐을 때는 생성되지 않음, 이는 잘된거고 우리는 다른 분리된, PostgresQL을 쓰고 싶음
            현재 개발용에 쓸 DB와 아마존 배포용으로 쓰는걸 다르게 하고 있는 상황임
        - 그래서 어떻게 할것이냐?
            - .env 에 DEBUG=True 등록
            - config/settings.py DEBUG = True -> DEBUG = bool(os.environ.get("DEBUG")) 로 변경
            - consfig/settings.py/DATABASE 부분을 아래와 같이 설정

                if DEBUG:
                    DATABASE = {
                        "defult": {
                            "ENGINE": "django.db.backends.sqlite3",
                            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
                        }
                    }
                else:
                    DATABASE = {
                        "defult": {
                            "ENGINE": "django.db.backends.postgresql",
                            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
                        }
                    }
                
                * Elastic Beanstalk은 파일에 있는 것을 올리는게 아니라 git commit에 등록된 걸 올리는데, .env는 .gitignore에 등록해놔서 commit에 없는 상태임, 따라서 아직 Elastic Beanstalk에 안올라간 것임
                    즉, Elastic Beanstalk에는 DEBUG 값이 없어서 False 일것이고 결국 else가 실행될 것임
                * PostgreSQL은 configuration 옵션 설정할 것들이 좀 있음. 이 설정은 다음 강의에서  


# 26.3
RDS - DB 생성
    RDS : DB를 Elastic Beanstalk 설정에서 분리되게 만들어준다

    AWS 사이트에서
    RDS/Database 들어가서 Create database 클릭
    PostgreSQL 선택
    POSTgreSQL 9.6.15-R1 선택 (나는 9.6.20-R1으로 선택함)
    Free tier 선택 (돈 안냄)
    DB instance identifier -> airbnb-clone
    username -> postgres 그대로
    비번 설정
    나머지 그대로 해두고
    create database


django document에 postgresql 내용 있음(참고)
(requirements.txt)
psycopg2==2.8.4 (수기로 입력: psycopg 최신버전?등 버전 확인해서 입력하면 될 듯 / pipenv로 설치 하지 않은 건 호환성 오류가 발생해서.. # 26.8 강의에서 해결)
---------------------------------------------------------------------------------------------------------
(Pipfile)
psycopg2 = "*" 추가: 강의에는 안나와있는데 소스코드에 기록되어있어서 수기로 작성해주었더니 deploy되었음
------- 음 혹시 이것 때문에? 설치 한게 아니라 작성만 해준거라?? 설치해주는 방법 익혀서 다시 시도해보자------
-----------------------다시: pipenv install psycopg2----------------------------------------------------------------------------------

(config/settings.py)
    else:
        DATABASE = {
            "defult": {
                "ENGINE": "django.db.backends.postgresql",
                "HOST":                     # Connectivity & security에 있는 Endpoint 입력
                "NAME": "airbgnb-clone",    # 방금 만들었던 db 이름
                "USER": "postgres",         # username에 있었던 것
                "PASSWORD": "",             # RDS에 등록한 비번
                "PORT": "",                 # Connectivity & security에 있는 Port
                
            }
        }
     -> 비번 등이 다 노출되어 있어서 좋지 않은 방식

    else:
        DATABASE = {
            "defult": {
                "ENGINE": "django.db.backends.postgresql",
                "HOST": os.environ.get("RDS_HOST"),                    # RDS/데이터베이스/Connectivity & security에 (연결&보안)있는 Endpoint 입력
                "NAME": os.environ.get("RDS_NAME"),                    # 방금 만들었던 db 이름(DB 식별자) : "airbnb-clone" -> "postgres"로 해줘야 Error – FATAL: database name does not exist  해결됨!!!!!!! 
                "USER": os.environ.get("RDS_USER"),                    # username에 있었던 것: "postgres"
                "PASSWORD": os.environ.get("RDS_PASSWORD"),            # RDS에 등록한 비번
                "PORT": "5432",                 # Connectivity & security에 있는 Port
                
            }
        }

    -> 이렇게 바꿔주고, 
    -> AWS 사이트 가서, 내가 만들어준 서버로 가서 Software가 있는곳에 Modify 클릭
    -> Environment properties에 .env에 있는 내용 입력 (nicco: MAILGUN_USERNAME, MAILGUN_PASSWORD, GH_ID, GH_SECRET, KAKAO_ID, RDS_HOST, RDS_NAME, RDS_USER, RDS_PASSWORD) 후 Apply


git add .
git commit -m "~~"
eb deploy

오류 발생
eb logs - Error: pg_config executable not found. / pg_config is required to build psycopg2 from source. .. 
    -> 현재 서버에는 python package만(패키지) 설치되어 있다. postgres를(소프트웨어) 설치해주어야 함 / 위 오류 구글링 하면 postgresql-devel 필요하다고 나옴



# 26.4

https://realpython.com/deploying-a-django-app-to-aws-elastic-beanstalk/ : 뭔가 도움이 될 것 같은 사이트임..

https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html 보면 됨 아래 내용 확인 가능 (왜 window server용으로 안할까..?)
(.ebextensions/packages.config 생성)
packages:
    yum:                        # 일종의 pip
        postgresql96-devel: []    # 96은 버전, aws 사이트, RDS/Databases/Configuration/Engine version 9.6.15 써있는 거 보고 96으로 기재함

이렇게 해주고
git add. / git commit -m "~" / eb deploy 해주라고 함

- 사이트 보면 무한로딩 에러 생김 : Django가 RDS데이터베이스로 연결할 수가 없는 것임
    -> RDS에서 Security group 으로 들어감 (Type EC2 Security 있는 곳 클릭 함)   / 한글로는 보안 그룹 규칙 default(sg-~~) 클릭
    
    # 기본적으로 security group은 소통할 수 있는 권한?
    이 경우에는 엘라스틱 빈스텍을 위한 security group이 있다. 소통을 위한 ec2와 기타등등을 위한 그룹이 있다.
    하지만 RDS 데이터베이스는 소통할 수 없다. 왜냐면 같은 보안 그룹에 속해있지 않기 때문
    outbound를 보면 데이터베이스가 트래픽을 어디든 보낼 수 있다고 되어있다.
    inbound를 보면 source가 딱 정해져 있다. 그래서 거기서만(이 보안 그룹에서만) 연결을 받을 수 있다.
    이건 AWS가 보안이 매우 강력하고, 프로젝트를 분리하길 원하기 때문

    # 그래서
    inbound / Edit / Add Rule - 새로 추가되는 것 All traffic하고
    Source 항목에 custuom 옆에 빈칸에 sg 입력하면 몇가지 선택 나온다 AWSEBSecurityGroup-~~ 선택 해주고 무한 로딩 했었던 페이지 다시 접근 시도(새로고침)하면
    Bad Request (400) 나옴 - 에러는 있지만 최소한 DB랑 연결이 되었다는 것 (나는 일단 502 Bad gateway만 나옴..)
    
    우선 어떤 문제가 있는지 보기 위해서 개발자 모드에서 봤던 노란 에러 페이지를 띄울 것임
    (config/settings.py)
    DEBUG = True 로 변경, DATABASES 위에 if DEBUG:로 해줬떤 부분도 (일시적으로) if DEBUG is False:로 변경(Debug=True인 상태로 PostgreSQL 연결하는 것임)
    이렇게 해주고
    git add . / git commit / eb deploy

    다시 새로고침해서 에러를 보면
    Invalid HTTP_HOST header: ~~ ~ to ALLOWED_HOSTS : 보안의 이유 때문임
    config/settings.py 를 보면 ALLOWED_HOSTS = [] 가 있음
    ALLOWED_HOSTS는 지정된 도메인 에서만 나의 앱을 실행시킬 수 있게 하는 것임
    ALLOWED_HOSTS = [".elasticbeanstalk.com", "내 홈페이지?"]  입력 (django 공식 문서에서 ALLOWED_HOSTS에 대해서 더 알아볼 것)
    또는, aws 사이트 내 서버, Configuration/Software - Modify -> Environment properties(환경변수)에 ALLOWED_HOSTS 추가 가능
    또한, settings.py에 SECRET_KEY가 있는데, 이 키를 aws Environment properties에 넣을 수 있음(nicco는 DJANGO_SECRET로 설정), 
        -> google에서 random password generator 검색해서 그걸 이용해서 만들고, 
           aws Environment properties에 등록하고(RDS_HOST, RDS_NAME 등 등록해준 것처럼) - ALLOWED_HOSTS에 내 홈페이지 넣는 대신에 하는 방법인 듯, 
           settings.py에는 SECRET_KEY = os.environ.get("비번 복붙")으로 설정
    이제 다시 deploy (git add . / git commit / eb deploy)

    -
    -
    -
    -
    -
    -
    -
    
    https://stackoverflow.com/questions/62457165/deploying-django-to-elastic-beanstalk-migrations-failed/63074781 참고해서 수정해보자
    -
    -
    -
    -
    -
    -
    -
    -




# 26.5
    relation "rooms_room" does not exist 에러 발생: 데이터베이스가 rooms_room을 가지고 있지 않다는 뜻
    * migration 파일을 가지고 있지만, 새로운 데이터베이스에서 다시 migration을 실행시켜야 한다..
        -> Django Elastic Beanstalk 환경에 command를 보낼 것임
            - 우선 .ebextensions내의 파일의 이름에 번호 부여-> 01-packages.config, 02-django.config - 알파벳 순서대로 진행이 되기 때문에 내가 진행되기 원하는 순서대로 번호 부여
        - Django를 Elastic Beanstalk에서 어떻게 배포하는지 (AWS 사이트에서) 튜토리얼을 보면
            option_settings:가 나와있는데 Elastic Beanstalk Container를 설정하는 것임
            우선...
            (.ebextensions/02-django.config)
            container_commands:
                01_migrate:
                    command: "django-admin migrate"
                    leader_only: true
            option_settings:                                        # 얘는 기존에 있는 것에 추가해주면 됨
                aws:elasticbeanstalk:application:environment:
                    DJANGO_SETTINGS_MODULE: config.settings         # 튜토리얼에는 ebdjango.settings 라고 써있는데, 우린 config 파일에 있으니 config로 수정
            
            - container commands는 다 끝났을 때 실행시키도록 하는 커맨드임 (aws 튜토리얼 찾아보면 나옴)
            - leader_only: ture -> 나는 하나의 인스턴스를 가지고 있고 트래픽이 들어오게 될것이다, aws에 돈을 지불하면 aws가 인스턴스를 자동으로 만들어준다. (child 인스턴스 같은 것들). 이 leader_only: true 는 기본적으로 그렇게 생성된 인스턴스들로 하여금 실행하지 말라고 함. 오직 leader만 커맨드를 실행하고, migration을 한번만 실행시키라고 하는것임
            - 어쨌든 위에 container_commands 추가하고 다시 deploy

        이렇게 다 해주고 실행하면 실행되어야 한다.
        홈페이지는 되는데, admin 페이지 들어가보면 admn에 css가 작동이 안된다. 다음강의에서...



# 26.6
(.ebextensions/02-django.config)
    container_commands:
        01_migrate:
            command: "django-admin migrate"
            leader_only: true
        02_compilemessages:                                 # locale에 .mo파일이 .gitignore에 의해서 무시되기 때문에 추가해주었다 함, 이렇게 하고 나면 Can't find msgfmt. Make sure you have have get text tool 오류 발생 
            command: "django-admin compilemessages"
    option_settings:                                        
        aws:elasticbeanstalk:container:python:
            WSGIPath: config/wsgi.py
        aws:elasticbeanstalk:application:environment:
            DJANGO_SETTINGS_MODULE: config.settings 


(.ebextensions/01-packages.config)
    위에 # 표시한 오류를 잡기 위해 아래와 같이 gettext-devel: [] 추가  
        packages:
            yum:
                postgresql??(아마 96?)-devel: []
                gettext-devel: []                           # 여기까지 해줘야 번역이 잘 작동


(config/settings.py)
DEBUG = bool(os.environ.get("DEBUG")) 되돌리기
if DEBUG is False 도 if DEBUG로 수정

이제 노란 에러페이지 못 봄 -> 이를 보완하기 위해 sentry.io 있음 (무료) - sentry.io 라고 검색하면 나옴
로그인하고 create project - Django 선택
설치 : pipenv install sentry-sdk==버전  (홈페이지에는 pip install --upgrade sentry-sdk 하라는데 --upgrade 부분에서 error 나서 그냥 pipenv install sentry-sdk 해줬음)
(config/settings.py)
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Sentry
if not DEBUG:
    sentry_sdk.init(
        dsn="https://~~~",                          # 사이트 확인
        integrations=[DjangoIntegration()],
    )

-> dsn 있는 부분을 aws 사이트 - 내 서버 - Configuration - Software Modify 에 추가 : SENTRY_URL으로 Name 정해주고 Value에 복붙
그리고 아래와 같이 설정

(config/settings.py)
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Sentry
if not DEBUG:
    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_URL"),                          
        integrations=[DjangoIntegration()],
        send_default_pii=True,                      # 추가된 내용, 만약 내가 로그인이 되어 있다면, 그리고 에러가 있다면, 어떤 유저가 어떤 에러를 겪었는지 보여준다


체크용으로 에러를 발생시키는 url을 추가해보자 (sentry 사이트에 있는 내용임)
(config/urls.py)

def trigger_error(request):
    division_by_zero = 1/0

urlpatterns = [path('sentry-debug/', trigger_error),]

(requirements.txt)
sentry-sdk==버전 입력 / 나는 그냥 pipenv lock -r > requirements.txt 로 재생성 해줌

그리고 deploy..

내 홈페이지 가서 뒤에 url 등록 해준것 입력:sentry-debug
-> Server Error(500)
    -> Sentry.io 가서 Issues 보면 ZeroDivisionError 확인 가능 & 이메일로도 올것임



# 26.7

user관리 커맨드를 만들자
(users/management/commands/createsu.py 생성)


(.ebextensions/02-django.config)
    container_commands:
        01_migrate:
            command: "django-admin migrate"
            leader_only: true
        02_compilemessages:                                  
            command: "django-admin compilemessages"
        03_createsu:
            command: "django-admin createsu"
    option_settings:                                        
        aws:elasticbeanstalk:container:python:
            WSGIPath: config/wsgi.py
        aws:elasticbeanstalk:application:environment:
            DJANGO_SETTINGS_MODULE: config.settings 


(users/management/commands/createsu.py)
seed_users.py 내용을 붙여넣는다
그리고 수정해서 아래와 같이

from django.core.managemenet.base import BaseCommand
from users.models import User

class Command(BaseCommand):
    
    help = "This command creates superuser"

    def handle(self, *args, **options):
        admin = User.objects_get_or_none(username="ebadmin") 
        if not admin:                                                                                       # deploy 할때마다 superuser 생성 말고, 이미 존재할때는 안하기 위해서 if 문
            User.objects.create_superuser("ebadmin", "jjj1305@hanmail.net", "123456")                       # create_superuser(username, email, password, **extra_fields) - django doc
            self.stdout.write(self.style.SUCCESS(f"Superuser Created"))
        else:
            self.stdout.write(self.style.SUCCESS(f"Superuser Exists"))

-> deploy

* create superuser를 해볼것인데,
우선 관리자 페이지 들어갈 url을 다듬어 보자.
관리자 페이지는 뒤에 admin으로 접속하면 보안이 취약하니, 랜덤하게 생성하는 것이 좋다
config/urls.py에서 path("admin/", admin.site.urls)를 path(os.environ.get("DJANGO_ADMIN"))을 하려고 했는데, 오류 발생 : 
(아마 메시지 등 내가 안본 강의에서) users/models에 objects = core_managers.CustomModelManager()를  만들어서 User의 매니저를 바꿨는데, 이것에 create_superuser 기능이 없기 때문

-> core/managers.py 가서 아래와 같이 수정
    from django.contrib.auth.models import UserManager

    class CustomModelManager(models.Manager):
        def get_or_none(self, **kwargs):
            try:
                return self.get(**kwargs)
            except self.model.DoesNotExist:
                return None
    
    class CustomUserManager(CustomModelManager, UserManager):
        pass

    (users/models.py/User)
    objects = core_managers.CustomUserManager로 수정

    # objects = core_manager.CustomModelManager 였는데, CustomModelManager는 models.Manager를 받았는데, 여기에는 superuser를 생성하는 기능이 없어서
        CustomUserManager(CustomModelManager, UserManager) 로 만들어줬다.(UserMnager에 있는 superuser 만드는 기능을 추가하기 위해 2개 함께 사용)
        그리고 나서
        objects = core_managers.CustomUserManager로 수정해준 것임

-> 이렇게 수정해주고 아까 하던 deploy 다시

뒤에 /admin 치고 들어가서 로그인
users/management/commands/createsu.py 보면 User.objects.create_superuser("ebadmin", "jjj1305@hanmail.net", "123456") 해놨음 ebadmin 아이디, 123456 비번으로 로그인 하면 됨


사이트 뒤에 admin 지우고 sentry-debug로 다시 접속해보자 - 또 서버에러 500

** 댓글에 있는 내용 참고 - window 사용자라고 하는데, 이거는 AWS Linux2 사용자용인듯 **
Window pipenv에서 작업하시는 분들을 위해 아래 django-config code command부분 공유드립니다. 참고하세용

container_commands:
01_migrate:
command: "source /var/app/venv/*/bin/activate ; python manage.py migrate"
leader_only: true
02_collectstatic:
command: "source /var/app/venv/*/bin/activate ; cd /var/app/staging ; python manage.py collectstatic --noinput"
03_createsu:
command: "source /var/app/venv/*/bin/activate ; cd /var/app/staging ; python manage.py createsu"
leader_only: true


** static 배포 관련: https://nachwon.github.io/django-deploy-4-static/

# 26.8
    https://django-storages.readthedocs.io/en/latest/

    pipenv install django-storages

    pipenv install boto3

    pipenv lock -r > requirements.txt

    (config/settings.py)
        THIRD_PARTY_APPS = ["storages"]

        if not DEBUG:

            DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
            STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
            AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
            AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
            AWS_STORAGE_BUCKET_NAME = 'taltal-realty-junhwan'                                            # 새로 설정(알아서)
                                                                                                         # 개발모드에서(강의에서는 if not DEBUG 밖에서 실행해주었음) python manage.py collectstatic를 실행시, boto3 필요하다고 나옴 -> pipenv install boto3
                                                                                                         # 이상태에서 실행하면 config 오류나고, 또 ~ ACL of 'public-read (globally publicly readable). ~~라고 떠서 아래와 같이 하나더 추가

            sentry_sdk.init(
                ~~
            )
    
    (config/settings.py)
    THIRD_PARTY_APPS = ["storages"]

    if not DEBUG:

        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
        AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = 'taltal-realty-junhwan' 
        AWS_DEFAULT_ACL = 'public-read'                                                                 # django-storages가 업그레이드 되어서 AWS_BUCKET_ACL이 아니라 AWS_DEFAULT_ACL로 바뀌었습니다 
                                                                                                        # 또한 AWS_AUTO_CREATE도 없어졌기 때문에 설정하지 마시고 직접 AWS로 가셔서 AWS_STORAGE_BUCKET_NAME 설정한것과 같은 이름으로 직접 만드셔야 됩니다. -> 모든 퍼블릭 액세스 차단 체크 풀어주기                                                                                               
                                                                                                        # 지금 하는게 무엇이야! boto라고 말한곳으로(boto3 의미?) static 파일들을 업로드 하는 것임
                                                                                                        # eb deploy 안하고, 위에대로 수행하면 Amazon S3 버킷에 위 버킷이 생성되었음... 근데 이건 강읭에서는 AWS_AUTO_CREATE_BUCKET = TRUE를 해준건데, 버전 업그레이드 되면서 없어져서 자동으로 안될지도 모름.


        sentry_sdk.init(
            ~~
        )

    # 위에 작동하는거 확인후..

    (.ebextensions/django.config)
        container_commands:
          04_collectstatic:
            command: "django-admin collectstatic --noinput"                                             # --noinput: input 값 그냥 다 yes 하라는 flag

    (config/settings.py)
        if not DEBUG:

            DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
            STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
            AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
            AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
            AWS_STORAGE_BUCKET_NAME = 'taltal-realty-junhwan' 
            AWS_DEFAULT_ACL = 'public-read'
            AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.ap-northeast-2.amazonaws.com                                           # AWS_S3를 가져오자 / # 또한 AWS_S3_CUSTOM_DOMAIN보시면 s3.다음에 .amazonaws.일텐데 그 사이에 지역 넣어줘야 합니다. s3.ap-northeast-2.amazonaws.com 이런식으로요.
            STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'                                          #STATIC_URL과 MDEDIA_URL을 덮어 씌우자고 해놓고 MEDIA_URL은 그냥 놔두자고 함.
                                                                                            


    # 스토리지를 바꿔보자. 왜냐면 모든게 다 같은 스토리지로 갈것이다 (uploads 폴더로? 왓?) - 브라우저에서 파일 upload할때, 그 파일이 내 컴퓨터 상의 uploads폴더가 아니라 아마존 서버로 올라가도록 하는 작업인듯..
    (config/custom_storages.py 생성)
    from storages.backends.s3boto3 import S3Boto3Storage

    class StaticStorage(S3Boto3Storage):
        location = "static/"
        file_overwrite = False                              # 중복된 파일 덮어쓰기 안하게 하기(시간절약)

    class UploadStorage(S3Boto3Storage):
        location = "uploads/"


    (config/settings.py)
    if not DEBUG:                                                                                       # AWS에 deploy 하고 싶을 때는 if not DEBUG 밖으로 꺼내서 해주기 / 그 외에는 밖으로 꺼내도 됨 -> 현재 이 논리가 이해가 안되는데... 생각해보자...

        DEFAULT_FILE_STORAGE = 'config.custom_storages.UploadStorage'                                   # 두 줄 변경
        STATICFILES_STORAGE = 'config.custom_storages.StaticStorage'
        AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = 'taltal-realty-junhwan' 
        AWS_DEFAULT_ACL = 'public-read'
        AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86500'}                                    # 강의 26.10에서 추가한 내용: 업로드 했을 때, 우린 이건 캐싱할거야 지정해준 시간 동안, 이걸 하면 파일들이 더 빨리 로딩 된다 함
        AWS_S3_CUSTOM_DOMAIN = f's3.ap-northeast-2.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}'             # 강의에서와 url이 다름. 강의에서는 : AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.ap-northeast-2.amazonaws.com              # AWS_S3를 가져오자 / # 또한 AWS_S3_CUSTOM_DOMAIN보시면 s3.다음에 .amazonaws.일텐데 그 사이에 지역 넣어줘야 합니다. s3.ap-northeast-2.amazonaws.com 이런식으로요.
        STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'                                           #STATIC_URL과 MDEDIA_URL을 덮어 씌우자고 해놓고 MEDIA_URL은 그냥 놔두자고 함.
        

    ***** 댓글 참고
        django-storages가 업그레이드 되어서 AWS_BUCKET_ACL이 아니라 AWS_DEFAULT_ACL로 바뀜. 
        또한 AWS_AUTO_CREATE도 없어졌기 때문에 설정하지 마시고 직접 AWS로 가셔서 AWS_STORAGE_BUCKET_NAME 설정한것과 같은 이름으로 직접 만들기
        또한 AWS_S3_CUSTOM_DOMAIN보면 s3.다음에 .amazonaws.일텐데 그 사이에 지역 넣어줘야 합니다. s3.ap-northeast-2.amazonaws.com 이런식으로요

        추가로 직접 만드신 bucket의 경우 'Block all public access'을 해제해야 파일들을 올리 수 있습니다. 아래 내용 참고 하세요~!
        https://bpog.cloud/posts/lab-deploy-django-on-aws-elastic-beanstalk.html

        추가하여 s3 의 static 폴더를 action-make public으로 해주어야 장고 어드민 패널이 css가 먹더라고요.


# 26.9
    - admin 페이지 url /admin 말고 변경하기, 복잡하게
    - Django imagekit 사용하기 : 용량 큰 사진 등이 올라왔을 때, formatt 변경등으로 용량 줄일수 있도록
