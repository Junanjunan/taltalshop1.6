https://www.youtube.com/watch?v=a2Rom1nfHRs

(users/views.py)
    class RequestPasswordResetEmail(View):
        def get(self, request):

            return redner(request, 'users/reset-password.html')

        def post(self, request):

            return redner(request, 'users/reset-password.html')


(users/urls.py)

    path('request-reset-link/', views.RequestPasswordResetEmail.as_view(), name="request-password")


* 해당 html 만들어주기

(users/reset-password.html)
    <form action="{% url 'request-password' %}" method="post">
        {% csrf_token %}

        <input type="email" name="email" placeholder="Email" id="emailField" value="{{values.email}}" />


(users/views.py)
    from django.core.mail import send_mail
    from django.contrib.sites.shortcuts import get_current_site
    from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
    from django.template.loader import render_to_string
    from .utils import account_activation_token
    from django.urls import reverse
    from django.contrib import auth
    from django.contrib.auth.tokens import PasswordResetTokenGenerator
    from validate_email import validate_email       # pipenv install validate_email
    from django.utils.encoding import force_bytes
    from django.utils.encoding import force_text

    class RequestPasswordResetEmail(View):
        def get(self, request):

            return redner(request, 'users/reset-password.html')

        def post(self, request):

            email = request.POST['email']                               # 'email'은 바로 위 html의 name="email" 의미

            context = {'values':request.POST }

            if not validate_email(email):
                messages.error(request, "please supply a valid email")
                return redner(request, 'users/reset-password.html', context)

            current_site = get_current_site(request)

            user = models.User.objects.filter(email=email)
            
            if user.exists():
                email_contents = {
                'user': user[0],
                'domain': current_site.domain,
                'uid': urlsafe_base64_encode(force_bytes(user[0].pk)),
                'token': PasswordResetTokenGenerator().make_token(user[0]),
                }
            
                link = reverse('reset-user-password', kwargs={'uidb64:email_contents['uid'], 'token':email_contents['token']})

                email_subject = 'Password reset Instructions'

                reset_url = 'http://' + current_site.domain+link

                email = EmailMessage(
                    email_subject,
                    'Hi. Please click the link below to reset your password \n' + reset_url,
                    'noreply@semycolon.com',
                    [email],
                )
                email.send(fail_silently=False)

            messages.success(request, "We have sent you an email to reset your passwrd")
            return render(request, 'users/reset-password.html')
    
    class CompletePasswordReset(View):
        def get(self, request, uidb64, token):    
            context = {'uidb64':uidb64, 'token': token}
            return render(request, 'users/set-new-password.html', context)

        def post(self, request, uidb64, token):
            context = {'uidb64':uidb64, 'token': token}
            return render(request, 'users/set-new-password.html', context)
            

(users/urls.py)
    path('set-new-password/<uidb64>/<token>', views.CompletePasswordReset.as_view(), name='reset-user-password')


(templates/users/set-new-password.html)

    <form acton="{% url 'users:reset-user-password' uidb64 token %}" method="post">
        {% csrf_token %}
        <input type="password" name="password" placeholder="Password" id="passwordField" />
        <input type="password" name="password1" placeholder="Confirm Password" id="passwordField" />
        <button></button>
    </form>
            
           
(users/views.py)
    class CompletePasswordReset(View):
        def get(self, request, uidb64, token):    
            context = {'uidb64':uidb64, 'token': token}

            try:
                user_id = force_text(urlsafe_base64_decode(uidb64))
                user = User.objects.get(pk=user_id)
                
                if not PasswordResetTokenGenerator().check_token(user, token):
                    messages.info(request, 'Password link is invalid, please request a new one')
                    return render(request, 'users/reset-password.html')

                messages.success(request, 'Password reset successfull')
                return redirect('users:login')
            except Exception as identifier:
                pass
            return render(request, 'users/set-new-password.html', context)

        def post(self, request, uidb64, token):
            context = {'uidb64':uidb64, 'token': token}
            password = request.POST['password']
            password1 = request.POST['password1']
            if password != password1:
                messages.error(request, 'Passwords does not match')
                return render(request, 'users/set-new-password.html', context)
            if len(password) < 6:
                messages.error(request, 'Password too short')
                return render(request, 'users/set-new-password.html', context)

            try:
                user_id = force_text(urlsafe_base64_decode(uidb64))
                user = User.objects.get(pk=user_id)
                user.set_password(password)
                user.save()

                messages.success(request, 'Password reset successfull')
                return redirect('users:login')
            except Exception as identifier:
                messages.info(request, 'Something went wrong')
                return render(request, 'users/set-new-password.html', context)

            