* pipenv install django-import-export / settings.py/INSTALLED_APPS에 "import_export" 추가
    https://django-import-export.readthedocs.io/en/latest/index.html

* Pipfile에 있는 것 그대로 설치하는 방법
    - pipenv install

1. pipenv - https://pipenv.pypa.io/en/latest/install/#installing-pipenv
    pip install --user pipenv
    설치후 확인 콘솔에 pipenv 치면 됨
     --> 이때 오류 발생할때 팁
     혹시나 윈도우 환경에서 콘솔에서 pipenv 쳤을 때 진행 안되시는 분은
    pip list 에서 virtualenv 이 설치되어있는지 확인 해주시고
    pip uninstall virtualenv
    pip uninstall pipenv
    pip install pipenv
    순서로 진행해주시면 정상적으로 작동되는거 확인 가능하실 겁니다 ^ㅡ^

2. pipenv 사용해서 environment(독립된 개발환경) 만들기 - 버블 생성
 방법: python 버전이 3.9 이므로
 콘솔창에 ********pipenv --three********   입력
 Pipfile 생성됨

 3. 그 개발환경(버블) 안으로 접근 : pipenv shell

 4. 버블 안으로 온 후 Django 설치: ********pipenv install Django==3.1.4********(최신 3.1.5)    (강의에서 2.2.5 버전 설치... 나중에 오류 나면 참고)
 (https://www.djangoproject.com/download/) 왼쪽 공식 사이트에는 pipenv install Django==3.1.4 로 나와있는데,
 우리는 개발환경을 사용할 것이니 pipenv로 대체

 5. 확인하기 : django-admin 입력

 6. ********django-admin startproject config******** 하면 config 파일과 그 안에 또 config 파일이 생기는데
 바깥쪽 config파일 이름을 아무거나 바꾸고 그 안에 config와 mange.py를 바깥으로 꺼낸다

 7. python manage.py runserver : 터미널에서 실행해서 127.0.0.1 8000 들어가면 설치 완료되었다고 나옴

 8. 로컬호스트 뜨고 그 주소 뒤에 /admin 으로 접속하면 Django administration 페이지가 뜨는데, 만약에 오류 뜨면 9번 실행

 9. 서버 꺼준 후(ctrl+c) python manage.py migrate 해주고 다시  python manage.py runserver:

 10. 유저 생성 : python manage.py createsuperuser

 11. python manage.py makemigrations : 장고가 우리의 models를 확인하고 migration 파일을 생성 - 변경된 데이터가 없으면 no changes detected 

 12. python manage.py migrate : 데이터베이스가 정보를 갖게 됨 (처음 실행시 데이터 유형을 데이터베이스에게 알려주게 됨..?)
    11. 12는 세트인 듯
------ 본격 코드 짜기

1. 앱(파일) 만들기 ********django-admin startapp 복수형 폴더이름: ex - django-admin startapp rooms (에어비앤비클론 파일안, 콘피그 파일 밖) ********

2. 강의 3.0 
    ********config-settings에 AUTH_USER_MODEL 추가하기 ********https://docs.djangoproject.com/en/3.1/topics/auth/customizing/
    
    Substituting a custom User model¶
    Some kinds of projects may have authentication requirements for which Django’s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.
    Django allows you to override the default user model by providing a value for the AUTH_USER_MODEL setting that references a custom model:
    
    AUTH_USER_MODEL = 'myapp.MyUser'
    
    This dotted pair describes the name of the Django app (which must be in your INSTALLED_APPS), and the name of the Django model that you wish to use as your user model.

3. 강의 4.1
 python manage.py makemigrations 적용시 default 값 필요하다고 뜨면, 해결책으로 null=True 지정 해주거나
 rooms의 migrations 폴더에서 __init__.py 빼고 다 삭제 & db.squlite3 삭제하고 다시 해주면 됨

 4. 강의 6.2 7.0
 터미널 경로 지정: cd + 경로 (복사붙여넣기 하면됨)


 5. 강의 9.2
 pipenv install django_seed
 --> config.settings의 THIRD_PARTY_APPS에 'django_seed' 추가

 6. 강의 10.2
    rendering 할 templates를 등록 : settings의 TEMPLATES 중 'DIR':[]에 등록 -> 'DIRS': [os.path.join(BASE_DIR, 'templates')]

7. 강의 10.3
    naming : template의 이름 = template폴더 내에 있는 파일 이름 / view name = urls.py 에 있는 것 (def all_rooms <-> path에 있는 all_rooms )

8. 강의 11.7
    Class-Based Views : django 사이트에도 있지만 http://ccbv.co.uk/ 사이트에 제대로 정리되어있음

9. 강의 16.0
 - mailgun

10. 강의 16.1
 - Dotenv : pipenv install django-dotenv

11. 강의 17.1
 - requests : pipenv install requests


